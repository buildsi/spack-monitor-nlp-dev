{
    "body": "**TLDR** \r\n\r\nThis PR provides a general mechanism to forward queries from `Spec` to `Packages` using the descriptor `ForwardQueryToPackage`. It implements most of the ideas discussed in #1821 (see details below), including a default behavior for the methods `spec.libs` and `spec.cppflags`. \r\n\r\nTo showcase an example some of the packages in the dag:\r\n```console\r\n$ spack spec -Il pexsi\r\nInput spec\r\n--------------------------------\r\n     fse2tj5  pexsi\r\n\r\nNormalized\r\n--------------------------------\r\n     ge7amsh  pexsi\r\n     4av5qrp      ^parmetis\r\n     wji7giq          ^cmake@2.8:\r\n     qfnm56h          ^metis@5:\r\n     2xnea7r          ^mpi\r\n\r\nConcretized\r\n--------------------------------\r\n[+]  m6mbmik  pexsi@0.9.0%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  ua5fwf7      ^parmetis@4.0.3%gcc@4.8~debug~gdb+shared arch=linux-ubuntu14-x86_64\r\n[+]  t5oqkdp          ^cmake@3.6.1%gcc@4.8~doc+ncurses+openssl+ownlibs~qt arch=linux-ubuntu14-x86_64\r\n[+]  qwcc7xb              ^ncurses@6.0%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[-]  23ldpkv              ^openssl@system%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  sj5ayy3          ^metis@5.1.0%gcc@4.8~debug~gdb~idx64~real64+shared arch=linux-ubuntu14-x86_64\r\n[+]  u4ku7al          ^openmpi@2.0.1%gcc@4.8~mxm~pmi~psm~psm2~slurm~sqlite3~thread_multiple~tm~verbs+vt arch=linux-ubuntu14-x86_64\r\n[+]  cbteeox              ^hwloc@1.11.4%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  6ryt5eq                  ^libpciaccess@0.13.4%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  2ffyrzb                      ^libtool@2.4.6%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  zfagq4d                          ^m4@1.4.17%gcc@4.8+sigsegv arch=linux-ubuntu14-x86_64\r\n[+]  m3xfbqd                              ^libsigsegv@2.10%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  4swdmfk                      ^pkg-config@0.29.1%gcc@4.8+internal_glib arch=linux-ubuntu14-x86_64\r\n[+]  bunu7o5                      ^util-macros@1.19.0%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  yhtbrhi      ^superlu-dist@3.3%gcc@4.8 arch=linux-ubuntu14-x86_64\r\n[+]  idsxmtv          ^openblas@0.2.19%gcc@4.8+fpic~openmp+shared arch=linux-ubuntu14-x86_64\r\n```\r\nhave been reworked to make use of the new features.\r\n\r\n##### Analysis and requirements\r\n\r\nThere are a number of things that emerged from #1682 and #1821 concerning build information, that I'll try to recap below for ease of reference : \r\n1. packages know themselves better than anybody else and thus they should handle requests that are based on their state\r\n2. the syntax in #1682 is needlessly redundant (e.g. `spec['blas'].blas_libs` mentions `blas` twice)\r\n3. only `blas` and `lapack` providers are taken care of properly, while normal packages are not\r\n4. use of `__getattr__` to intercept calls to non-existing attributes in `Spec` should be avoided\r\n5. if we add a mechanism to query for build information, then it should be possible to opt-out of it (see case for `dealii` and `trilinos`)\r\n\r\nOn top of that I would add a couple more points : \r\n1. sometimes packages provide more than one service (API, functionality, etc.) and the few needed are only known from the calling scope (e.g. `openmpi` installs `cxx`, `c` and `fortran` APIs and a particular package may need to link with `cxx`)\r\n2. the actions required to compute build properties are the same for many simple and well-behaved packages (e.g. `spec['name'].libs` will require very often to search for `lib{name}.{suffix}` somewhere in `prefix`)\r\n##### Design\r\n\r\nI grabbed the basic idea that @tgamblin proposed in #1821 and expanded it further. What I didn't like there was just the syntax it would have imposed : \r\n\r\n``` python\r\nblas = spec['blas']  # to retrieve the spec providing blas we use __getitem__\r\nblas_libs = spec.libs('blas') # ... but to ask for properties of 'blas' we use function calls\r\n...\r\n```\r\n\r\nso I tried to achieve something like : \r\n\r\n``` python\r\nblas_libs = spec['blas'].libs # ask the blas provider for list of libraries\r\nmpi_cxx_libs = spec['mpi:cxx'].libs # ask the mpi provider just for the libraries needed for the `cxx` API\r\nmpi_cxx_and_fortran_libs = spec['mpi:cxx,fortran'].libs # ask the mpi provider `cxx` and fortran libs\r\nmetis_libs = spec['metis'].libs # I want to be able to do the same thing with a non-virtual package\r\n...\r\n# To opt-out of default behavor\r\nclass Trilinos(Package):\r\n    libs = None\r\n```\r\n\r\nAnd have readable tracebacks in case of failures : \r\n\r\n``` shell\r\n# Here I made openblas fail on purpose\r\nTraceback (most recent call last):\r\n  File \"/home/mculpo/PycharmProjects/spack/lib/spack/spack/build_environment.py\", line 511, in fork\r\n    function()\r\n  File \"/home/mculpo/PycharmProjects/spack/lib/spack/spack/package.py\", line 983, in build_process\r\n    self.install(self.spec, self.prefix)\r\n  File \"/home/mculpo/PycharmProjects/spack/var/spack/repos/builtin/packages/pexsi/package.py\", line 70, in install\r\n    '@LAPACK_LIBS': self.spec['lapack'].libs.joined(),\r\n  File \"/home/mculpo/PycharmProjects/spack/lib/spack/spack/spec.py\", line 650, in __get__\r\n    raise AttributeError(message)\r\nAttributeError: 'openblas' package has no relevant attribute 'libs'\r\n    spec : 'openblas@0.2.19%gcc@6.2.0+fpic~openmp+shared arch=linux-Ubuntu14-x86_64'\r\n    queried as : 'lapack'\r\n    extra parameters : '[]'\r\n```\r\n\r\nThe whole design is based on a few of simple concepts : \r\n- a `Spec` instance has now an internal state to keep track of 'queries' from client code, and a few attributes to retrieve, set or clear the query state\r\n- a descriptor takes care of forwarding queries from `Spec` to `Package` and uses a chain of responsibility (documented in the code) to serve them\r\n- `Spec.__getitem__` automatically set a new query state in the required `spec`. If the `spec` being queried is virtual `__getitem__` returns a copy instead of a reference to deal with the case of packages that provide more than one service.\r\n\r\n##### Modifications\r\n- [x] calls forwarded from Spec to Package are now explicit\r\n- [x] added descriptor within Spec to manage forwarding\r\n- [x] added state in Spec to maintain query information\r\n- [x] modified a few packages (the one involved in spack install pexsi) to showcase changes\r\n- [x] added unit tests for the new logic in `__getitem__`\r\n- [ ] added documentation on `cppflags` and `libs`\r\n",
    "user": "alalazo",
    "url": "https://api.github.com/repos/spack/spack/issues/1875",
    "updated_at": "2017-11-12 00:39:08",
    "created_at": "2016-09-29 09:38:19",
    "closed_at": "2017-03-02 18:01:30",
    "state": "closed",
    "title": "spec : interface for build information",
    "number": 1875,
    "milestone": "v0.11.0",
    "labels": [
        "ready",
        "needs-response",
        "dependencies",
        "discussion",
        "blas-lapack-scalapack"
    ],
    "id": 180000018,
    "html_url": "https://github.com/spack/spack/pull/1875",
    "assignees": [
        "alalazo"
    ],
    "comments": 35
}