{
    "body": "When a package *indirectly depends on python*, any attempt to run `EnvironmentModifications.from_sourcing_file` inside its installation environment ends up in an error. The `python` command is broken as well (and this is probably the real cause of the observed issue).\r\n\r\n### Expected Result\r\n\r\nTo have that package installed.\r\n\r\n### Actual Result\r\n\r\n```console\r\n$ spack install example-dependent\r\n[lots of usual output...]\r\n==> Executing phase: 'install'\r\n==> Error: RuntimeError: Sourcing file /home/spack/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/SOURCE_ME returned a non-zero exit code\r\nRuntimeError: RuntimeError: Sourcing file /home/spack/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/SOURCE_ME returned a non-zero exit code\r\n\r\n/home/spack/spack-repo-test/packages/example-dependent/package.py:16, in install:\r\n     1             to_be_sourced = fs.join_path(prefix, 'SOURCE_ME')\r\n     2             with open(to_be_sourced, 'w') as f:\r\n     3                 f.write('export SOURCE_ME_HAS_BEEN_SOURCED=1')\r\n  >> 4             EnvironmentModifications.from_sourcing_file(to_be_sourced).apply_modifications()\r\n     5             fs.touch(fs.join_path(prefix, 'INSTALL_DONE'))\r\n\r\nSee build log for details:\r\n  /home/spack/spack/var/spack/stage/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/bzip2-1.0.6/spack-build.out\r\n```\r\n\r\nThe actual error raised by the call is:\r\n\r\n```console\r\n$ cat /home/spack/spack/var/spack/stage/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/bzip2-1.0.6/spack-build.out\r\n==> Executing phase: 'install'\r\nImportError: No module named site\r\n```\r\n\r\n### Steps to reproduce the issue\r\n\r\nI've managed to reduce the problem to a minimal set of packages that can be obtained [from GitHub](https://github.com/nazavode/spack-repo-test.git):\r\n\r\n```console\r\n$ git clone https://github.com/nazavode/spack-repo-test.git ~/spack-repo-test\r\n$ spack repo add ~/spack-repo-test\r\n```\r\n\r\nThat Spack repo contains two packages:\r\n\r\n1. `example-dependency` that depends on `python`\r\n2. `example-dependent` that depends on `example-dependency`\r\n\r\nHaving that repo added to Spack allows us to obtain this *interesting* spec:\r\n\r\n```console\r\n$ spack spec example-dependent\r\nInput spec\r\n--------------------------------\r\nexample-dependent\r\n\r\nConcretized\r\n--------------------------------\r\nexample-dependent@1.0.6%gcc@4.8.5 arch=linux-centos7-x86_64 \r\n    ^example-dependency@1.0.6%gcc@4.8.5 arch=linux-centos7-x86_64 \r\n        ^python@2.7.14%gcc@4.8.5 patches=123082ab3483ded78e86d7c809e98a804b3465b4683c96bd79a2fd799f572244 +pic+shared~tk~ucs4 arch=linux-centos7-x86_64 \r\n            [a lot of other stuff python depends on...]\r\n```\r\n\r\nThis minimal dependency graph is enough to trigger the issue:\r\n\r\n```console\r\n$ spack install example-dependent\r\n[lots of usual output...]\r\n==> Executing phase: 'install'\r\n==> Error: RuntimeError: Sourcing file /home/spack/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/SOURCE_ME returned a non-zero exit code\r\nRuntimeError: RuntimeError: Sourcing file /home/spack/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/SOURCE_ME returned a non-zero exit code\r\n\r\n/home/spack/spack-repo-test/packages/example-dependent/package.py:16, in install:\r\n     1             to_be_sourced = fs.join_path(prefix, 'SOURCE_ME')\r\n     2             with open(to_be_sourced, 'w') as f:\r\n     3                 f.write('export SOURCE_ME_HAS_BEEN_SOURCED=1')\r\n  >> 4             EnvironmentModifications.from_sourcing_file(to_be_sourced).apply_modifications()\r\n     5             fs.touch(fs.join_path(prefix, 'INSTALL_DONE'))\r\n\r\nSee build log for details:\r\n  /home/spack/spack/var/spack/stage/example-dependent-1.0.6-ickrp7u2evbgk7l6jivxu6jexzptd5ro/bzip2-1.0.6/spack-build.out\r\n```\r\n\r\nThe root of the problem lies in the fact that the `python` interpreter inside the installation environment is broken:\r\n\r\n```console\r\n$ spack install --only dependencies example-dependent\r\n[installs just fine, output omitted...]\r\n$ spack env example-dependent python\r\nImportError: No module named site\r\n```\r\n\r\nInspecting the affected environment we get:\r\n\r\n```console\r\n$ spack env example-dependent bash\r\n$ which python\r\n/usr/bin/python\r\n$ env | grep PYTHON\r\nPYTHONHOME=/home/spack/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/python-2.7.14-4ipldugnhasdas2pjasdevq4ruha6biu\r\nPYTHONPATH=\r\n$ python\r\nImportError: No module named site\r\n```\r\n\r\nIt looks like `^python@2.7.14` messed with our environment injecting that `PYTHONHOME` that our system's `/usr/bin/python` is not standing at all. The fun part is that *some* distro (Ubuntu 16.04 for instance) ships with a python that actually likes the *broken* environment and proved to be working fine (see below for details).\r\n\r\n#### Wrap up\r\n\r\n1. When a package depends **indirectly** on `python`, it ends up with:\r\n    * `PYTHONHOME=<path to spack python prefix>`\r\n    * `PYTHONPATH=`\r\n    * `which python` is `<system python>`, which **is *broken* or not depending on its version**. This in turn breaks `EnvironmentModifications.from_sourcing_file` as well.\r\n2. When a package depends **directly** on `python`, it ends up with:\r\n    * `PYTHONHOME=<path to spack python prefix>`\r\n    * `PYTHONPATH=<path to spack python prefix>`\r\n    * `which python` is `<spack python>`, which works correctly.\r\n\r\n### Information on your system\r\n\r\nReproduced this on a [centos7 docker image](https://gist.github.com/nazavode/87d073832894e71a7cf12db06e6b6aed) that ships with `python 2.7.5` while tested to be **working fine** on a [ubuntu 16.04 docker image](https://gist.github.com/nazavode/50c6336f73fca09cf0c4b0997747df08) that ships with `python 2.7.12`. Spack was cd084d02ce56a076a21b61bb1c4850dec74e2b4d.\r\nA `Dockefile` that executes the whole issue reproduction procedure can be found [here](https://gist.github.com/nazavode/61650268b150e94bdbfa58fe0f626373).\r\n",
    "user": "nazavode",
    "url": "https://api.github.com/repos/spack/spack/issues/7128",
    "updated_at": "2018-02-12 07:08:46",
    "created_at": "2018-01-30 15:50:08",
    "closed_at": "2018-02-12 07:08:46",
    "state": "closed",
    "title": "Broken python and from_sourcing_file in packages depending indirectly on python",
    "number": 7128,
    "milestone": null,
    "labels": [
        "bug",
        "python"
    ],
    "id": 292833308,
    "html_url": "https://github.com/spack/spack/issues/7128",
    "assignees": [],
    "comments": 2
}