{
    "body": "I have a bash script which goes through  a set of sepcs, installs them and runs tests. Key parts are:\r\n```\r\nspack install --keep-stage \"$s\"\r\nspack cd -s \"$s\"\r\ncd <build-folder>\r\nspack env \"$s\" bash << EOF\r\nctest <parameters>\r\nEOF\r\n```\r\n\r\nI would like to improve this by not re-installing the spec, but rather check if it's installed already, and if so, in the stage I kept outside of system temporary directories I would just do `git pull` to update the sources and `make all -j8` to re-build.\r\n\r\n`spack find <spec>` is the candidate, but I don't think it returns an error code to the bash. \r\nIdeally it should be something like\r\n\r\n```\r\nspec_installed = <something-with-spack-find>\r\nif [ \"${spec_installed}\" == \"1\" ]; then\r\n  git pull\r\n  make all\r\nelse\r\n  spack install --keep-stage \"$s\"$\r\nfi\r\n```\r\n\r\nAnyone tried to do something similar with bash?",
    "user": "davydden",
    "url": "https://api.github.com/repos/spack/spack/issues/8033",
    "updated_at": "2018-05-07 09:34:45",
    "created_at": "2018-05-07 09:19:15",
    "closed_at": "None",
    "state": "open",
    "title": "use spack find from bash to check if a spec is installed",
    "number": 8033,
    "milestone": null,
    "labels": [
        "feature",
        "question"
    ],
    "id": 320733265,
    "html_url": "https://github.com/spack/spack/issues/8033",
    "assignees": [],
    "comments": 3
}