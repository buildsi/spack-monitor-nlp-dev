{
    "body": "We use POSIX `patch` to apply patches to files when building, but `patch` by default prompts the user when it looks like a patch has already been applied. This means that:\r\n\r\n1. If a patch lands in upstream and we don't disable it in a package, the build will start failing.\r\n2. `spack develop` builds (which keep the stage around) will fail the second time you try to use them.\r\n\r\nTo avoid that, we can run `patch` with `-N` (also called `--forward`, but the long option is not in POSIX). `-N` causes `patch` to just ignore patches that have already been applied. This *almost* makes `patch` idempotent, except that it returns 1 when it detects already applied patches with `-N`, so we have to look at the output of the command to see if it's safe to ignore the error.\r\n\r\n- [x] Remove non-POSIX `-s` option from `patch` call\r\n- [x] Add `-N` option to `patch`\r\n- [x] Ignore error status when `patch` returns 1 due to `-N`\r\n- [x] Add tests for applying a patch twice and applying a bad patch\r\n- [x] Tweak `spack.util.executable` so that it saves the error that *would have been* raised with `fail_on_error=True`. This lets us easily re-raise it.",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/26784",
    "updated_at": "2021-11-13 17:06:52",
    "created_at": "2021-10-17 10:46:38",
    "closed_at": "2021-10-18 23:11:42",
    "state": "closed",
    "title": "patches: make re-applied patches idempotent",
    "number": 26784,
    "milestone": null,
    "labels": [
        "tests",
        "utilities"
    ],
    "id": 1028284505,
    "html_url": "https://github.com/spack/spack/pull/26784",
    "assignees": [],
    "comments": 12
}