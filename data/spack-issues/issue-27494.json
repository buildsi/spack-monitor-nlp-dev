{
    "body": "### Steps to reproduce\n\nCurrently when you have\r\n\r\n```python\r\nvariant('x', when='+y')\r\n```\r\nthe following errors:\r\n```python\r\ndef cmake_args(self):\r\n  return [self.define_from_variant('X', 'x')]\r\n```\r\nwhen the condition for the existence of the variant is not met.\r\n\r\nIt's a bit questionable what the behavior of `define_from_variant` *should* be. The most sensible to me is to do nothing when the condition for `x`'s existence is not met. I don't think it should be seen as \"off\".\r\n\r\nBut then it's awkward, because the only thing `self.define_from_variant(...)` can do is return an empty string, which would result in an empty argument being passed to `cmake` on the command line like `'cmake' '-DY=OFF' '' ..`.\r\n\r\nIn autotools we do `args += self.with_or_without('x')` which would handle this situation better, since it can then return an empty array when the condition for `x`'s existence is not met.\n\n### Error message\n\n.\n\n### Information on your system\n\n.\n\n### General information\n\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\n- [X] I have searched the issues of this repo and believe this is not a duplicate\n- [X] I have run the failing commands in debug mode and reported the output",
    "user": "haampie",
    "url": "https://api.github.com/repos/spack/spack/issues/27494",
    "updated_at": "2021-12-14 14:42:51",
    "created_at": "2021-11-16 22:04:46",
    "closed_at": "2021-12-14 14:42:51",
    "state": "closed",
    "title": "Config argument helper functions do not support conditional variants",
    "number": 27494,
    "milestone": null,
    "labels": [
        "bug",
        "impact-low"
    ],
    "id": 1055423633,
    "html_url": "https://github.com/spack/spack/issues/27494",
    "assignees": [],
    "comments": 1
}