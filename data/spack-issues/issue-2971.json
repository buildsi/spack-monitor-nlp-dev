{
    "body": "``` bash\r\n$ spack install glib\r\n==> Installing glib\r\n==> Applied patch no-Werror=format-security.patch\r\n==> Ran patch() for glib\r\n==> Building glib [AutotoolsPackage]\r\n==> Executing phase : 'autoreconf'\r\n==> Error: ProcessError: Command exited with status 1:\r\n/spack/lib/spack/spack/build_systems/autotools.py:229, in autoreconf:\r\n     198      def autoreconf(self, spec, prefix):\r\n     199          \"\"\"Not needed usually, configure should be already there\"\"\"\r\n     200          # If configure exists nothing needs to be done\r\n     201          if os.path.exists(self.configure_abs_path):\r\n     202              return\r\n     203          # Else try to regenerate it\r\n     204          autotools = ['m4', 'autoconf', 'automake', 'libtool']\r\n     205          missing = [x for x in autotools if x not in spec]\r\n     206          if missing:\r\n     207              msg = 'Cannot generate configure: missing dependencies {0}'\r\n     208              raise RuntimeError(msg.format(missing))\r\n     209          tty.msg('Configure script not found: trying to generate it')\r\n     210          tty.warn('*********************************************************')\r\n     211          tty.warn('* If the default procedure fails, consider implementing *')\r\n     212          tty.warn('*        a custom AUTORECONF phase in the package       *')\r\n     213          tty.warn('*********************************************************')\r\n     214          with working_dir(self.configure_directory):\r\n     215              m = inspect.getmodule(self)\r\n     216              # This part should be redundant in principle, but\r\n     217              # won't hurt\r\n     218              m.libtoolize()\r\n     219              m.aclocal()\r\n     220              # This line is what is needed most of the time\r\n     221              # --install, --verbose, --force\r\n     222              autoreconf_args = ['-ivf']\r\n     223              if 'pkg-config' in spec:\r\n     224                  autoreconf_args += [\r\n     225                      '-I',\r\n     226                      join_path(spec['pkg-config'].prefix, 'share', 'aclocal'),\r\n     227                  ]\r\n     228              autoreconf_args += self.autoreconf_extra_args\r\n  >> 229              m.autoreconf(*autoreconf_args)\r\n```\r\n\r\nFrom the build log\r\n\r\n```\r\n==> Configure script not found: trying to generate it\r\n==> Warning: *********************************************************\r\n==> Warning: * If the default procedure fails, consider implementing *\r\n==> Warning: *        a custom AUTORECONF phase in the package       *\r\n==> Warning: *********************************************************\r\n==> 'libtool-2.4.6-bcbiddkmbu4gy7wx6ftntmxqe3c5br3z/bin/libtoolize'\r\nlibtoolize:   error: One of these is required:\r\nlibtoolize:                 gm4 gnum4 m4\r\nlibtoolize:   error: Please install GNU M4, or 'export M4=/path/to/gnu/m4'.\r\n```\r\n\r\nWhich is solved when m4 is added as a dependency\r\n\r\n``` python\r\ndepends_on('m4', type='build')\r\n```\r\n\r\nMy deeper question is whether this dependency belongs in the package like the solution above, or if AutotoolsPackage should find this automatically.",
    "user": "sknigh",
    "url": "https://api.github.com/repos/spack/spack/issues/2971",
    "updated_at": "2017-02-04 01:19:23",
    "created_at": "2017-01-31 17:15:26",
    "closed_at": "2017-02-04 01:19:23",
    "state": "closed",
    "title": "Glib build failure when AutotoolsPackage does not load m4",
    "number": 2971,
    "milestone": null,
    "labels": [],
    "id": 204362589,
    "html_url": "https://github.com/spack/spack/issues/2971",
    "assignees": [],
    "comments": 1
}