{
    "body": "### Steps to reproduce the issue\n\n```console\r\nspack install sundials +cuda\r\n```\r\ngives\r\n```\r\n1 error found in build log:\r\n     195    -- Detecting CXX compiler ABI info - done\r\n     196    -- Check for working CXX compiler: /home/pbley/spack/lib/spack/env/gcc/g++ - skipped\r\n     197    -- Detecting CXX compile features\r\n     198    -- Detecting CXX compile features - done\r\n     199    -- CXX standard set to 11\r\n     200    -- C++ extensions set to OFF\r\n  >> 201    CMake Error at /home/pbley/spack/opt/spack/linux-fedora35-skylake/gcc-11.2.1/cmake-3.22.1-dcsazh57tpiasebkk7pdpkrnqphfx3il/share/cmake-3.22/Modules/CMakeDetermineCompilerId.cmake:726 (message):\r\n     202      Compiling the CUDA compiler identification source file\r\n     203      \"CMakeCUDACompilerId.cu\" failed.\r\n     204    \r\n     205      Compiler:\r\n     206      /home/pbley/spack/opt/spack/linux-fedora35-skylake/gcc-11.2.1/cuda-11.5.1-eu775ioxioqnpjwiv3nwsh5vayagnhas/bin/nvcc\r\n     207\r\n```\r\nThe info about the CMake flags contains `'-DCMAKE_CUDA_ARCHITECTURES=none'`, which should be the reason for `nvcc` failing to compile.\n\n### Information on your system\n\n```\r\n* **Spack:** 0.17.1-829-0b2507053e\r\n* **Python:** 3.10.1\r\n* **Platform:** linux-fedora35-skylake\r\n* **Concretizer:** clingo\r\n```\n\n### Additional information\n\nHi,\r\nI actually didn't originally encounter this issue while installing the given packages, but while using them as examples for writing my own packages with the help of `CudaPackage`. The issue is easy to fix by writing e.g. `archs[0] != 'none'` instead of `archs != 'none'`, as `archs` is a tuple. Right now when not specifying a `cuda_arch` variant on the command line, spack runs into the `if` part of the conditional (`'none'` is not equal to `('none', )`), but `nvcc` doesn't accept `'none'` as an input. The only (very small?) problem with my solution is the edge case that someone actually asks for multiple architectures, but has `none` in the list for some reason. The position of the `none` in the list would determine if spack lets the compiler decide the CUDA compute capabilities it compiles for, or if the build fails due to `none` still appearing in the compiler flags.\r\n\r\nMost of these packages are maintained by @bvanessen but `sundials` is maintained by @balos1, @cswoodward and @gardner48. \r\n\r\nAn example where this problem is avoided would be the `exago` package (@ashermancinelli and @CameronRutherford), although there is another issue with their solution, as it makes it impossible to compile for more than one `cuda_arch` at a time by ignoring all but the first element of the tuple. Unfortunately, the example in the [documentation](https://spack.readthedocs.io/en/latest/build_systems/cudapackage.html#usage) does the same.\r\n\r\nAs I found all these packages by grepping around naively for `DCMAKE_CUDA_ARCHITECTURES` and `archs != 'none'`, there might be more packages with similar issues.\r\n\r\nFor completeness: \r\n[spack-build-out.txt](https://github.com/spack/spack/files/7881160/spack-build-out.txt)\r\n[spack-build-env.txt](https://github.com/spack/spack/files/7881161/spack-build-env.txt)\n\n### General information\n\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\n- [X] I have run `spack maintainers <name-of-the-package>` and **@mentioned** any maintainers\n- [X] I have uploaded the build log and environment files\n- [X] I have searched the issues of this repo and believe this is not a duplicate",
    "user": "pauleonix",
    "url": "https://api.github.com/repos/spack/spack/issues/28441",
    "updated_at": "2022-01-24 18:51:18",
    "created_at": "2022-01-17 10:44:08",
    "closed_at": "None",
    "state": "open",
    "title": "Installation issue: `sundials +cuda` (also concerns `aluminum`, `dihydrogen`, `hydrogen`, `lbann`)",
    "number": 28441,
    "milestone": null,
    "labels": [
        "build-error"
    ],
    "id": 1105687034,
    "html_url": "https://github.com/spack/spack/issues/28441",
    "assignees": [],
    "comments": 1
}