{
    "body": "From @tgamblin \r\n\r\nAlex:\r\n\r\nYou can!  Just set them the way you normally would in python from within the package.py file.  e.g.:\r\n\r\nSpack adds an \u2018env\u2019 shortcut to os.environ, which you can use:\r\n\r\n```\r\n        def install(self, spec, prefix):\r\n                env[\u2018VAR\u2019] = \u201cvalue\"\r\n```\r\n\r\nYou could just as easily use os.environ directly:\r\n\r\n```\r\n        import os\r\n        ...\r\n        def install(self, spec, prefix):\r\n                os.environ[\u2018VAR\u2019] = \u201cvalue\"\r\n```\r\n\r\nOr, if you\u2019re using AutotoolsPackage or CmakePackage, you can use setup_environment:\r\n\r\n```\r\n        def setup_environment(self, spack_env, run_env):\r\n                env[\u2018VAR\u2019] = value\r\n```\r\n\r\nOR, equivalently:\r\n```\r\n        def setup_environment(self, spack_env, run_env):\r\n                spack_env.set(\u2018VAR\u2019, value)\r\n```\r\n\r\nThere are two ways to do this because we need to store the run_env for later \u2014 that determines what goes in the module files generated for each package.  spack_env is provided for consistency but has basically the same effect as setting the environment variables directly, since setup_environment is executed before install() within the build environment.",
    "user": "citibeth",
    "url": "https://api.github.com/repos/spack/spack/issues/3359",
    "updated_at": "2017-11-22 15:44:38",
    "created_at": "2017-03-04 00:35:26",
    "closed_at": "2017-11-22 15:44:38",
    "state": "closed",
    "title": "Docs: ways to change the build environment",
    "number": 3359,
    "milestone": null,
    "labels": [
        "documentation"
    ],
    "id": 211838346,
    "html_url": "https://github.com/spack/spack/issues/3359",
    "assignees": [],
    "comments": 2
}