{
    "body": "I would like to submit a PR to add some docs, or else discuss a way to enable this by default.\r\n\r\n### Problem\r\n\r\nA `spack` installed `llvm` can be used as a compiler with the following steps\r\n\r\n```console\r\n$ spack install llvm\r\n$ spack load llvm\r\n$ spack compiler find\r\n```\r\n\r\nThis results in an almost valid compiler.  There are two problems:\r\n\r\n1. Many packages require a fortran compiler, which `llvm` still lacks.  I believe that will be changing in the nearish future, but for now, users should be encouraged to add a fortran compiler manually.  Typically the system `gfortran` is compatible, so this means they should edit `~/.spack/linux/compilers.yaml` to be\r\n\r\n    ```yaml\r\n    - compiler:\r\n        environment: {}\r\n        extra_rpaths: []\r\n        flags: {}\r\n        modules: []\r\n        operating_system: fedora25\r\n        paths:\r\n          cc: /opt/spack/opt/spack/linux-fedora25-x86_64/gcc-6.4.1/llvm-5.0.0-id4ljxr45ihmyys2qr76ce7o7ungrtag/bin/clang\r\n          cxx: /opt/spack/opt/spack/linux-fedora25-x86_64/gcc-6.4.1/llvm-5.0.0-id4ljxr45ihmyys2qr76ce7o7ungrtag/bin/clang++\r\n        # ADD THESE TWO LINES!\r\n          f77: /usr/bin/gfortran\r\n          fc: /usr/bin/gfortran\r\n        spec: clang@5.0.0\r\n        target: x86_64\r\n    ```\r\n\r\n2. As I have now learned, this is not sufficient.  The `llvm` module most be loaded, else you run into e.g., `libiomp.so` not found.  This could also be supported by `extra_rpaths`, but the module created by `spack` seems to be the most logical choice:\r\n\r\n    ```console\r\n    $ cd $SPACK_ROOT/share/modules/linux-fedora25-x86_64\r\n    $ ls llvm-*\r\n    llvm-3.9.1-gcc-6.4.1-pusyhzj  llvm-5.0.0-gcc-6.4.1-id4ljxr\r\n    ```\r\n\r\n    Meaning that the `modules` list in the `compilers.yaml` should become `modules: [llvm-5.0.0-gcc-6.4.1-id4ljxr]`, which `spack` is able to find regardless of whether or not this is in `MODULEPATH`.\r\n\r\n### Question\r\n\r\nAre there already simple enough mechanisms in existence that `spack` would be able to detect (e.g., by examining the path for `cc` or `cxx`) this and auto-load this module?  Is there a reason not to do this?\r\n\r\n### Proposed Solution\r\n\r\nIf there is even a faint possibility this could cause logistical problems (e.g., dual-spack :tm:), I would like to add a docs PR with a new section just after [Compilers Requiring Modules](http://spack.readthedocs.io/en/latest/getting_started.html#compilers-requiring-modules).  It would include an example of `3.9.1` and `5.0.0` together to make it clear how the `modules` part differs.\r\n\r\n1. If desired, the proposed title would be `Special Considerations for Spack Installed LLVM`.\r\n2. Any particular wisdom on choice of fortran compiler?  For example, instead encourage `flang`?  TBH from the looks of it, it's not exactly stable.  Definitely a major step in the right direction, but not exactly production ready in my naive opinion.\r\n\r\n### Tangent\r\n\r\nI'd like to add something on the page explaining exactly what the use of `environment` is and how to use it.  It seems useful, but it also seems like nonstandard YAML and I don't know what it's all about...",
    "user": "svenevs",
    "url": "https://api.github.com/repos/spack/spack/issues/5817",
    "updated_at": "2019-02-06 11:58:20",
    "created_at": "2017-10-19 02:05:42",
    "closed_at": "2019-02-06 11:58:20",
    "state": "closed",
    "title": "Special considerations for spack installed clang",
    "number": 5817,
    "milestone": null,
    "labels": [],
    "id": 266697683,
    "html_url": "https://github.com/spack/spack/issues/5817",
    "assignees": [],
    "comments": 3
}