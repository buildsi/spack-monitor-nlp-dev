{
    "body": "Fixes #3529.\r\n\r\n- gcc on macOS says it's version 4.2.1, but it's really clang, and it's\r\n  actually the *same* clang as the system clang.\r\n\r\n- It also doesn't respond with a full path when called with\r\n  --print-file-name=libstdc++.dylib, which is expected from gcc in abi.py.\r\n  Instead, it gives a relative path and _gcc_compiler_compare doesn't\r\n  understand what to do with it.  This results in errors like:\r\n\r\n  ```\r\n  lib/spack/spack/abi.py, line 71, in _gcc_get_libstdcxx_version\r\n      libpath = os.readlink(output.strip())\r\n  OSError: [Errno 2] No such file or directory: 'libstdc++.dylib'\r\n  ```\r\n\r\n- This commit does two things:\r\n\r\n  1. Ignore any gcc that's actually clang in abi.py.  We can probably do\r\n     better than this, but it's not clear there is a need to, since we\r\n     should handle the compiler as clang, not gcc.\r\n\r\n  2. Don't auto-detect any \"gcc\" that is actually clang anymore.  Ignore\r\n     it and expect people to use clang (which is the default macOS\r\n     compiler anyway).\r\n\r\nNote that this means we won't see `gcc@4.2.1` by default on Mac OS X anymore.  Only the corresponding `clang`.  I think it was confusing anyway, and users can still add fake gccs to their compilers.yaml if they want, but I think we should discourage it.\r\n",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/3854",
    "updated_at": "2017-04-21 22:54:32",
    "created_at": "2017-04-15 01:44:27",
    "closed_at": "2017-04-21 22:45:13",
    "state": "closed",
    "title": "Fix ABI detection issues with macOS gcc",
    "number": 3854,
    "milestone": null,
    "labels": [],
    "id": 221919292,
    "html_url": "https://github.com/spack/spack/pull/3854",
    "assignees": [],
    "comments": 2
}