{
    "body": "Draft PR because it still needs some work, but it's in a state that @adamjstewart could start playing with.\r\n\r\nFixes #311.\r\nFixes #22613.\r\nFixes #20429.\r\n\r\nThis PR makes the concretizer aware of already-installed packages, and it tries to optimize the solve by reusing them instead of building when it can.\r\n\r\n## `--reuse` option\r\n\r\nCurrently, this adds a `--reuse` option to `spack solve`.  You can try it out with `spack solve -Il --reuse <spec>`.  I think the interface is TBD; we probably want to think about what to call this vs. the old solve, and about which one should be default.\r\n\r\n## Minimizing builds\r\n\r\nThe way this works is:\r\n\r\n1. Figure out which installed packages are possible dependencies of the things to be installed.\r\n2. Add information about installed hashes that are possible dependencies to the ASP program.  \r\n    It looks kind of like this `openssl` example, but for everything that is installed:\r\n    ```prolog\r\n    installed_hash(\"openssl\",\"lwatuuysmwkhuahrncywvn77icdhs6mn\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node\",\"openssl\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"version\",\"openssl\",\"1.1.1g\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node_platform\",\"openssl\",\"darwin\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node_os\",\"openssl\",\"catalina\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node_target\",\"openssl\",\"x86_64\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node_compiler\",\"openssl\",\"apple-clang\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"node_compiler_version\",\"openssl\",\"apple-clang\",\"12.0.0\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"hash\",\"openssl\",\"lwatuuysmwkhuahrncywvn77icdhs6mn\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"depends_on\",\"openssl\",\"zlib\",\"build\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"depends_on\",\"openssl\",\"zlib\",\"link\").\r\n    imposed_constraint(\"lwatuuysmwkhuahrncywvn77icdhs6mn\",\"hash\",\"zlib\",\"x2anksgssxsxa7pcnhzg5k3dhgacglze\").\r\n    ```\r\n    You can see from the example that if we use this hash for `openssl`, it also forces a bunch of constraints and a dependency on its particular `zlib` installation on the solve.  i.e., it's concrete -- we *have* to use it the way it was built and we cannot twiddle things like variant values on things we already installed.\r\n3. Try to minimize the number of packages that are built.  That looks like of like:\r\n    ```prolog\r\n    % the solver is free to choose at most one installed hash for each package in the solution\r\n    { hash(Package, Hash) : installed_hash(Package, Hash) } 1 :- node(Package).\r\n\r\n    % if a hash is selected, we impose all of its constraints\r\n    impose(Hash) :- hash(Package, Hash).\r\n\r\n    % if we haven't selected a hash for a package, and if it is not external, we build it\r\n    build(Package) :- not hash(Package, _), not external(Package), node(Package).\r\n    #minimize { 1@18,Package : build(Package) }.\r\n    ```\r\n\r\n## OS handling\r\n\r\nThe solver was still handling OS defaults through hard constraints (this is how we did it before we knew how to do it the right way -- with optimization), so this reworks OS handling in the solver.  I believe this is the last part of the spec that needed converting -- targets and compilers were already changed in past PRs.\r\n\r\nWe now optimize for OS matches in the Spec, but we allow you to depend on a package for an older OS, with some limits.  Specifically, I noticed when testing this that I wanted to reuse still-working Catalina installations on Big Sur.  This adds the ability to specify, e.g.: `os_compatible(\"catalina\", \"bigsur\")` so that the solver knows that it can safely reuse certain packages. I think we can also leverage this for, e.g., reusing CentOS binaries on RHEL.\r\n\r\n## Relaxing existing constraints\r\n\r\nMany of the existing constraints in the solver are meant for *things we plan to build*.  When reusing concrete specs, We have to take the installed specs as they are.  We can't do things like disallow unknown variant names (the variants may not exist) or compiler version OS support (we only know about the compilers on the current system, not the ones the concrete specs were built with).  So, these types of constraints have been restricted to *only* apply to specs we intend to build.  If we reuse something concrete, we still have to consider things like dependency version constraints (e.g. if you want to reuse `openssl` you should still check if the version that's installed satisfies your `depends_on(\"openssl@:1.0\")` constraint).\r\n\r\n## Example\r\n\r\nHere's a comparison of reusing vs. not reusing with `llvm`:\r\n\r\nWith reuse:\r\n\r\n<details>\r\n<summary>`spack solve -Il --reuse llvm` output</summary>\r\n\r\n```console\r\n(spackle):spack> spack solve -Il --reuse llvm\r\n==> Best of 7 considered solutions.\r\n==> Optimization Criteria:\r\n  Priority  Criterion                                 Value\r\n  1         number of packages to build (vs. reuse)       5\r\n  2         deprecated versions used                      2\r\n  3         version weight                                0\r\n  4         number of non-default variants (roots)        1\r\n  5         multi-valued variants                        -1\r\n  6         preferred providers for roots                 0\r\n  7         number of non-default variants (non-roots)    5\r\n  8         preferred providers (non-roots)              10\r\n  9         compiler mismatches                           0\r\n  10        os mismatches                                 8\r\n  11        version badness                              51\r\n  12        count of non-root multi-valued variants      -5\r\n  13        non-preferred compilers                       0\r\n  14        target mismatches                             0\r\n  15        non-preferred targets                       253\r\n\r\n -   ikfi254  llvm@12.0.1%apple-clang@12.0.0~all_targets+clang~code_signing+compiler-rt~cuda~flang~gold+internal_unwind~ipo+libcxx+lld~lldb~llvm_dylib~mlir~omp_debug~omp_tsan+polly~python~shared_libs~split_dwarf build_type=Release cuda_arch=none arch=darwin-bigsur-x86_64\r\n -   xtkcrrd      ^cmake@3.20.5%apple-clang@12.0.0~doc+ncurses+openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-x86_64\r\n[+]  eli4aax          ^ncurses@6.2%apple-clang@12.0.0~symlinks+termlib arch=darwin-catalina-x86_64\r\n[+]  lwatuuy          ^openssl@1.1.1g%apple-clang@12.0.0+systemcerts arch=darwin-catalina-x86_64\r\n[+]  x2anksg              ^zlib@1.2.11%apple-clang@12.0.0+optimize+pic+shared arch=darwin-catalina-x86_64\r\n -   oc2m54j      ^hwloc@2.5.0%apple-clang@12.0.0~cairo~cuda~gl~libudev+libxml2~netloc~nvml~pci+shared arch=darwin-bigsur-x86_64\r\n[+]  dqzlvh6          ^libxml2@2.9.10%apple-clang@12.0.0~python arch=darwin-catalina-x86_64\r\n[+]  xrjlxcv              ^libiconv@1.16%apple-clang@12.0.0 arch=darwin-catalina-x86_64\r\n[+]  gfa5h76              ^xz@5.2.5%apple-clang@12.0.0~pic arch=darwin-catalina-x86_64\r\n -   ozoef2w          ^pkgconf@1.7.4%apple-clang@12.0.0 arch=darwin-bigsur-x86_64\r\n -   tzk3evu      ^perl-data-dumper@2.173%apple-clang@12.0.0 arch=darwin-bigsur-x86_64\r\n[+]  jjgcc6o          ^perl@5.30.3%apple-clang@12.0.0+cpanm+shared+threads arch=darwin-catalina-x86_64\r\n[+]  df3hxmr              ^gdbm@1.18.1%apple-clang@12.0.0 arch=darwin-catalina-x86_64\r\n[+]  4d3hjqd                  ^readline@8.0%apple-clang@12.0.0 arch=darwin-catalina-x86_64\r\n[+]  24lf5pr      ^python@3.7.8%apple-clang@12.0.0+bz2+ctypes+dbm~debug+libxml2+lzma~nis~optimizations+pic+pyexpat+pythoncmd+readline+shared+sqlite3+ssl~tix~tkinter~ucs4~uuid+zlib patches=0d98e93189bc278fbc37a50ed7f183bd8aaf249a8e1670a465f0db6bb4f8cf87,210df3f28cde02a8135b58cc4168e70ab91dbf9097359d05938f1e2843875e57 arch=darwin-catalina-x86_64\r\n[+]  6ntaixw          ^bzip2@1.0.8%apple-clang@12.0.0+shared arch=darwin-catalina-x86_64\r\n[+]  2jdnmfp          ^expat@2.2.9%apple-clang@12.0.0~libbsd arch=darwin-catalina-x86_64\r\n[+]  g5lf2co          ^gettext@0.20.2%apple-clang@12.0.0+bzip2+curses+git~libunistring+libxml2+tar+xz arch=darwin-catalina-x86_64\r\n[+]  dc675hk              ^tar@1.32%apple-clang@12.0.0 arch=darwin-catalina-x86_64\r\n[+]  5ye4c7r          ^libffi@3.3%apple-clang@12.0.0 patches=26f26c6f29a7ce9bf370ad3ab2610f99365b4bdd7b82e7c31df41a3370d685c0 arch=darwin-catalina-x86_64\r\n[+]  nwrcpot          ^sqlite@3.31.1%apple-clang@12.0.0+column_metadata+fts~functions~rtree arch=darwin-catalina-x86_64\r\n[+]  de6nj46      ^z3@4.8.7%apple-clang@12.0.0+python arch=darwin-catalina-x86_64\r\n[+]  mjlsl7o          ^py-setuptools@49.2.0%apple-clang@12.0.0 arch=darwin-catalina-x86_64\r\n```\r\n\r\n</details>\r\n\r\nWithout reuse:\r\n\r\n<details>\r\n<summary>`spack solve -Il llvm` output</summary>\r\n\r\n```console\r\n(spackle):spack> spack solve -Il llvm\r\n==> Best of 7 considered solutions.\r\n==> Optimization Criteria:\r\n  Priority  Criterion                                 Value\r\n  1         number of packages to build (vs. reuse)      16\r\n  2         deprecated versions used                      0\r\n  3         version weight                                9\r\n  4         number of non-default variants (roots)        1\r\n  5         multi-valued variants                        -1\r\n  6         preferred providers for roots                 0\r\n  7         number of non-default variants (non-roots)   10\r\n  8         preferred providers (non-roots)              20\r\n  9         compiler mismatches                           0\r\n  10        os mismatches                                 0\r\n  11        version badness                               9\r\n  12        count of non-root multi-valued variants       0\r\n  13        non-preferred compilers                       0\r\n  14        target mismatches                             0\r\n  15        non-preferred targets                         0\r\n\r\n -   2p6rpiv  llvm@8.0.1%apple-clang@12.0.0~all_targets+clang~code_signing+compiler-rt~cuda~flang~gold+internal_unwind~ipo+libcxx+lld~lldb~llvm_dylib~mlir~omp_debug~omp_tsan+polly~python~shared_libs~split_dwarf build_type=Release cuda_arch=none patches=3fa900e31763cc7ff604430b86faa4eb650048c1796ebd39db2dcf84f6168a8b arch=darwin-bigsur-skylake\r\n -   rs5nwwn      ^cmake@3.20.5%apple-clang@12.0.0~doc+ncurses~openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n -   xrklbl5          ^ncurses@6.2%apple-clang@12.0.0~symlinks+termlib abi=none arch=darwin-bigsur-skylake\r\n -   ztt3pgs              ^pkgconf@1.7.4%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   hjw2gx7      ^hwloc@2.5.0%apple-clang@12.0.0~cairo~cuda~gl~libudev~libxml2~netloc~nvml~pci+shared arch=darwin-bigsur-skylake\r\n -   zipu7bi      ^perl-data-dumper@2.173%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   raet62c          ^perl@5.34.0%apple-clang@12.0.0+cpanm+shared+threads arch=darwin-bigsur-skylake\r\n -   akjl2di              ^berkeley-db@18.1.40%apple-clang@12.0.0+cxx~docs+stl patches=b231fcc4d5cff05e5c3a4814f6a5af0e9a966428dc2176540d2c05aff41de522 arch=darwin-bigsur-skylake\r\n -   l7gigul              ^bzip2@1.0.8%apple-clang@12.0.0~debug~pic+shared arch=darwin-bigsur-skylake\r\n -   vazus7p                  ^diffutils@3.7%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   vtlbzpn                      ^libiconv@1.16%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   xkdly6s              ^gdbm@1.19%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   gmhw2jt                  ^readline@8.1%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n[+]  xflsoui              ^zlib@1.2.11%apple-clang@12.0.0+optimize+pic+shared arch=darwin-bigsur-skylake\r\n -   inxzdsq      ^python@3.9.6%apple-clang@12.0.0+bz2~ctypes+dbm~debug~libxml2~lzma~nis~optimizations+pic~pyexpat+pythoncmd+readline+shared~sqlite3~ssl~tix~tkinter~ucs4+uuid+zlib patches=0d98e93189bc278fbc37a50ed7f183bd8aaf249a8e1670a465f0db6bb4f8cf87 arch=darwin-bigsur-skylake\r\n -   m6ef5no          ^apple-libuuid@1353.100.2%apple-clang@12.0.0 arch=darwin-bigsur-skylake\r\n -   otyemkg          ^gettext@0.21%apple-clang@12.0.0+bzip2+curses+git~libunistring~libxml2~tar~xz arch=darwin-bigsur-skylake\r\n```\r\n\r\n</details>\r\n\r\nYou can see we reuse a lot more with the reuse option on -- whereas without it Spack wants to build clean versions of everything but `zlib`.  You can see this in the optimization criteria as well -- the difference between using `--reuse` and not is 16 built packages.  In the case without `--reuse`, we're just not telling the solver about the installed packages so it has no hashes to swap in for different builds.\r\n\r\n## Optimization criteria\r\n\r\nThere are still some tricky things in here -- specifically around the priority of these optimizations.  You can see in the solve calls above that we're optimizing by *minimizing* the number of packages built.  That has some weird consequences for things that aren't installed yet, like:\r\n\r\n```console\r\n(spackle):spack> spack solve -Il --reuse cmake\r\n[...]\r\n -   fw3sb6l  cmake@3.20.5%apple-clang@12.0.0~doc+ncurses~openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n[+]  ywtu57g      ^ncurses@6.2%apple-clang@12.0.0~symlinks+termlib abi=none arch=darwin-catalina-skylake\r\n```\r\n\r\nHere, the concretizer decided to disable `openssl` on a new cmake install, to avoid installing more things.  So it did exactly what we told it to, but not what we likely want. We probably need to add some nuance to the optimization criterion.  In particular, sometimes you care more about default variants, and sometimes you'd rather it reuse what's already installed.\r\n\r\nCurrently, I am thinking we want to only minimize builds *if* something that is installed could be reused. If there's some package we already have to build, we should just respect its defaults and build dependencies as we normally would.  I haven't worked out how best to model that yet or if it'll end up fitting peoples' intuition, so please provide suggestions.\r\n\r\nOn a similar note, you can see that we also used a couple of deprecated versions of things *because they were already installed*.  Seems like maybe we should put the reuse optimization below the \"don't use deprecated versions\" optimization so that this won't happen.  That would mean that you'd need to be explicit on the command line about using deprecated versions to get them into the solve.  I suspect that might surprise some people so I'm not sure whether we shouldn't just warn instead.\r\n\r\n## Tasks\r\n\r\n- [x] Add information about installed dependencies to the solve\r\n- [x] Rework OS semantics in the solver to allow for certain OS's to be compatible\r\n- [x] Make certain integrity constraints only apply to specs we intend to build and not to reused specs\r\n- [x] Resolve issues with semantics and ordering of optimization criteria (i.e. do the right thing when we're not reusing)\r\n- [x] Figure out whether this should be the default and what the option should be called (e.g., this is `--reuse` -- should the old way be `--deterministic`?  `--upgrade`? `--latest`?)\r\n- [x] add options to `spack install`\r\n- [x] enable reuse from binary caches and upstreams too (so that if you register them, you automatically reuse prebuilt things)\r\n- [x] add `--reuse` to docs\r\n\r\nThat last task will make build caches and upstreams significantly easier to use the way we intended them, and it'll mean that you can both pull from `develop` *and* easily reuse binaries from older versions of Spack.  This will reduce the perception of \"hashes changing\" that people have with the old, more deterministic concretizer.",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/25310",
    "updated_at": "2021-11-08 16:04:01",
    "created_at": "2021-08-08 20:42:19",
    "closed_at": "2021-11-05 07:15:48",
    "state": "closed",
    "title": "concretizer: reuse existing packages",
    "number": 25310,
    "milestone": null,
    "labels": [
        "concretization",
        "documentation",
        "dependencies",
        "tests",
        "commands",
        "environments",
        "binary-packages"
    ],
    "id": 963511051,
    "html_url": "https://github.com/spack/spack/pull/25310",
    "assignees": [
        "tgamblin",
        "alalazo",
        "becker33"
    ],
    "comments": 54
}