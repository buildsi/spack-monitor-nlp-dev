{
    "body": "Python 3 metaclasses have a `__prepare__` method that lets us save the class's dictionary before it is constructed.  In Python 2 we had to walk up the stack using our `caller_locals()` method to get at this.  Using `__prepare__` is much faster as it doesn't require us to use `inspect`.\r\n\r\nThis PR makes multimethods use the faster `__prepare__` method in Python3, while still using `caller_locals()` in Python 2.  We try to reduce the use of caller locals using caching to speed up Python 2 a little bit.\r\n\r\nThis makes loading all packages in Python 3 ~25% faster for me (7.4 seconds vs. 10 seconds).",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/13238",
    "updated_at": "2019-10-17 15:31:21",
    "created_at": "2019-10-16 20:21:27",
    "closed_at": "2019-10-17 13:40:24",
    "state": "closed",
    "title": "multimethods: avoid calling caller_locals() in Python 3",
    "number": 13238,
    "milestone": null,
    "labels": [
        "specs",
        "performance",
        "directives",
        "package dsl"
    ],
    "id": 508077972,
    "html_url": "https://github.com/spack/spack/pull/13238",
    "assignees": [],
    "comments": 0
}