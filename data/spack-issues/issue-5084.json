{
    "body": "This reworks I/O redirection in Spack to avoid race cases, to make output more deterministic, and to ensure that everything gets logged in `build.out`.  Previously output could be different if you just ran `spack install` or ran `spack install | cat`.  This PR tries to make the output more deterministic and to simplify the interface to the `log_output` context handler.\r\n\r\n- [x] Simplify interface to `log_output`. New interface requires only one context handler instead of two. Before:\r\n\r\n    ```python\r\n      with log_output('logfile.txt') as log_redirection:\r\n           with log_redirection:\r\n               # do things ... output will be logged\r\n    ```\r\n\r\n  After:\r\n    ```python\r\n      with log_output('logfile.txt'):\r\n          # do things ... output will be logged\r\n    ```\r\n\r\n  If you also want the output to be echoed to ``stdout``, use the `echo` parameter::\r\n    ```python\r\n      with log_output('logfile.txt', echo=True):\r\n          # do things ... output will be logged and printed out\r\n    ```\r\n  And, if you just want to echo *some* stuff from the parent, use ``force_echo``:\r\n    ```python\r\n      with log_output('logfile.txt', echo=False) as logger:\r\n          # do things ... output will be logged\r\n\r\n          with logger.force_echo():\r\n              # things here will be echoed *and* logged\r\n    ````\r\n  A key difference between this and the previous implementation is that *everything* in the context handler is logged.  Previously, things like  `Executing phase 'configure'` would not be logged, only output to the screen, so understanding phases in the build log was difficult.\r\n\r\n- [x] The implementation of `log_output()` is different in two major ways:\r\n\r\n  1. This implementation avoids race cases by using only one pipe (before we had a multiprocessing pipe and a unix pipe). The logger daemon stops naturally when the input stream is closed, which avoids a race in the previous implementation where we'd miss some lines of output because the parent would shut the daemon down before it was done with all output.\r\n\r\n  2. Instead of turning output redirection on and off, which prevented some things from being logged, this version uses control characters in the output stream to enable/disable forced echoing. We're using the time-honored xon and xoff codes, which tell the daemon to echo anything between them AND write it to the log. This is how `logger.force_echo()` works.\r\n\r\n- [x] Fix places where output could get stuck in buffers by flushing more aggressively. This makes the output printed to the terminal the same as that which would be printed through a pipe to `cat` or to a file. Previously these could be weirdly different, and some output would be missing when redirecting Spack to a file or pipe.\r\n\r\n- [x] Simplify input and color handling in both `build_environment.fork()` and `llnl.util.tty.log.log_output()`. Neither requires an input_stream parameter anymore; we assume stdin will be forwarded if possible.\r\n\r\n- [x] remove `llnl.util.lang.duplicate_stream()` and remove associated monkey-patching in tests, as these aren't needed if you just check whether stdin is a tty and has a fileno attribute.\r\n\r\n- [x] fix exit call in `SpackError.die()`:\r\n    1. Previously we would use `os._exit()` in to avoid Spack error handling in the parent process when build processes failed.  This isn't necessary anymore since build processes propagate their exceptions to the parent process.\r\n    \r\n    2. Use `sys.exit` instead of `os._exit`. This has the advantage of automatically flushing output streams on quit, so output from child processes is not lost when Spack exits.\r\n\r\n- [x] add test for output capture\r\n    1. Check that output is captured from python and forked programs\r\n    2. Disable `pytest`'s `capsys`/`capfd` where necessary\r\n\r\n- [x] Preserve verbosity setting across installs\r\n  - user presses `v`, and it's valid for the entire Spack run!",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/5084",
    "updated_at": "2017-11-12 00:45:03",
    "created_at": "2017-08-14 12:25:57",
    "closed_at": "2017-08-20 23:51:11",
    "state": "closed",
    "title": "Rework output redirection",
    "number": 5084,
    "milestone": "v0.11.0",
    "labels": [
        "WIP"
    ],
    "id": 250015592,
    "html_url": "https://github.com/spack/spack/pull/5084",
    "assignees": [],
    "comments": 21
}