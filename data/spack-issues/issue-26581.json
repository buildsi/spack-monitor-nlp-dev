{
    "body": "Format changes are because I use shfmt, hopefully keep things consistent that way.\r\n\r\nOtherwise, this does the following:\r\n\r\n1. fix zsh bug by setting it to posix-compliant mode (also adds some optional performance tracing functions)\r\n2. re-implement append and prepend using a C-side conditional rather than a shell conditional, nice trick I didn't know about before for making lists `${thing:+$thing$sep}` expands to `$thing$sep` if, and only if, `$thing` is already set.\r\n3. extend now:\r\n    1. cuts out early if the RHS is empty (surprisingly common)\r\n    2. if both use the same separator, it's implemented as an append, because why not\r\n    3. if neither of those is possible it loops and directly appends, this is because eval is *amazingly* slow per-invocation on bash and zsh, doing an eval for each is a whole lot slower\r\n    4. I removed one extra specialization that used IFS splitting and IFS expansion with `$*` to handle cases where the separator is different but the target separator is one character long.  It actually helps, but rarely enough that the comparison isn't worth it.\r\n 4. system_dir is re-factored to be a single op on the shell side, no loop, refactored into a generic \"contains\" function for items in delimited lists, kinda love this one, took system_dir from 40% of runtime to 4% in one go.  Also used one other place already, could probably be used for more but I didn't want to re-factor the other loops right now.\r\n 5. fixed likely latent bug with spack path removal, used to only remove the first match, now removes all instances of the spack path, `.` and empty from PATH.\r\n\r\nHere's the perf output from a hyperfine run across dash, busybox sh (bsbsh wrapper), bash, and zsh:\r\n\r\n```\r\nTesting dash\r\nBenchmark #1: export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do dash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):     836.0 ms \u00b1   4.4 ms    [User: 728.6 ms, System: 102.1 ms]\r\n  Range (min \u2026 max):   829.3 ms \u2026 842.7 ms    10 runs\r\n\r\nBenchmark #2: export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do dash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      1.053 s \u00b1  0.006 s    [User: 884.1 ms, System: 160.1 ms]\r\n  Range (min \u2026 max):    1.043 s \u2026  1.060 s    10 runs\r\n\r\nSummary\r\n  'export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do dash ../spack/test_cc.sh ; done' ran\r\n    1.26 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do dash ../spack/test_cc.sh ; done'\r\n    1.43 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do dash ../spack/test_cc.sh ; done'\r\n\r\nTesting ../spack/bsbsh\r\nBenchmark #1: export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      1.239 s \u00b1  0.009 s    [User: 970.0 ms, System: 258.8 ms]\r\n  Range (min \u2026 max):    1.226 s \u2026  1.251 s    10 runs\r\n\r\nBenchmark #2: export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      1.851 s \u00b1  0.010 s    [User: 1.511 s, System: 0.326 s]\r\n  Range (min \u2026 max):    1.834 s \u2026  1.869 s    10 runs\r\n\r\nBenchmark #3: export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      1.525 s \u00b1  0.012 s    [User: 1.190 s, System: 0.322 s]\r\n  Range (min \u2026 max):    1.504 s \u2026  1.540 s    10 runs\r\n\r\nSummary\r\n  'export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done' ran\r\n    1.23 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done'\r\n    1.49 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do ../spack/bsbsh ../spack/test_cc.sh ; done'\r\n\r\nTesting bash\r\nBenchmark #1: export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      2.801 s \u00b1  0.018 s    [User: 2.466 s, System: 0.327 s]\r\n  Range (min \u2026 max):    2.771 s \u2026  2.822 s    10 runs\r\n\r\nBenchmark #2: export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      4.004 s \u00b1  0.013 s    [User: 3.717 s, System: 0.289 s]\r\n  Range (min \u2026 max):    3.982 s \u2026  4.021 s    10 runs\r\n\r\nBenchmark #3: export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      3.501 s \u00b1  0.035 s    [User: 3.142 s, System: 0.353 s]\r\n  Range (min \u2026 max):    3.436 s \u2026  3.546 s    10 runs\r\n\r\nBenchmark #4: export base=/home/scogland1/Repos/spack_before ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      2.754 s \u00b1  0.029 s    [User: 2.205 s, System: 0.550 s]\r\n  Range (min \u2026 max):    2.707 s \u2026  2.798 s    10 runs\r\n\r\nSummary\r\n  'export base=/home/scogland1/Repos/spack_before ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done' ran\r\n    1.02 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done'\r\n    1.27 \u00b1 0.02 times faster than 'export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done'\r\n    1.45 \u00b1 0.02 times faster than 'export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do bash ../spack/test_cc.sh ; done'\r\n\r\nTesting zsh\r\nBenchmark #1: export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      2.859 s \u00b1  0.020 s    [User: 1.892 s, System: 0.994 s]\r\n  Range (min \u2026 max):    2.827 s \u2026  2.895 s    10 runs\r\n\r\nBenchmark #2: export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh ; done\r\n  Time (mean \u00b1 \u03c3):      3.911 s \u00b1  0.022 s    [User: 2.574 s, System: 1.368 s]\r\n  Range (min \u2026 max):    3.878 s \u2026  3.935 s    10 runs\r\n\r\nBenchmark #3: export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh \r\n  Time (mean \u00b1 \u03c3):      3.376 s \u00b1  0.026 s    [User: 2.357 s, System: 1.043 s]\r\n  Range (min \u2026 max):    3.335 s \u2026  3.409 s    10 runs\r\n\r\nSummary\r\n  'export base=/home/scogland1/Repos/spack_opt ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh ; done' ran\r\n    1.18 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_esceval ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh ; done'\r\n    1.37 \u00b1 0.01 times faster than 'export base=/home/scogland1/Repos/spack_clean ; for x in $(seq 1 200) ; do zsh ../spack/test_cc.sh ; done'\r\n```\r\n\r\nOn all the shells this version is between 40% and 50% faster than the recent posix-shelling update.  On zsh it now runs reliably.  Finally on bash it runs 45% faster than the original posix version, and only 1-2% slower than the original *bash array* version.  Also dash still wins, hands-down, on performance.",
    "user": "trws",
    "url": "https://api.github.com/repos/spack/spack/issues/26581",
    "updated_at": "2022-02-23 01:41:08",
    "created_at": "2021-10-07 18:33:09",
    "closed_at": "None",
    "state": "open",
    "title": "optimize and format cc",
    "number": 26581,
    "milestone": null,
    "labels": [
        "compilers",
        "build-environment",
        "shell-support"
    ],
    "id": 1020340918,
    "html_url": "https://github.com/spack/spack/pull/26581",
    "assignees": [
        "trws"
    ],
    "comments": 7
}