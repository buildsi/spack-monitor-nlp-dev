{
    "body": "If a spec is written to yaml and then read back, it's dependencies do not correctly report ```.is_extension```:\r\n\r\n```\r\n>>> from spack.spec import Spec\r\n>>> x = Spec('git')\r\n>>> x.concretize()\r\n>>> y = Spec.from_dict(x.to_dict())\r\n>>> y['libxml2'].package.is_extension\r\nTrue\r\n>>> x['libxml2'].package.is_extension\r\nFalse\r\n```\r\n\r\n(```Spec.to_yaml``` and ```Spec.from_yaml``` use the corresponding dict functions, so this affects specs that have been read from files).\r\n\r\nNote that using ```Spec.copy()``` does not have this problem.\r\n\r\nTwo notes:\r\n\r\n* Specs constructed with ```Spec.from_dict``` have ```_concrete``` set to False (although ```concrete``` is true if the original Spec was concrete)\r\n* ```Package.is_extension``` refers to ```Spec._concrete```\r\n\r\nThis suggests the following possible solutions:\r\n\r\n* Package.is_extension uses Spec.concrete instead of Spec._concrete. This is done in https://github.com/LLNL/spack/pull/3853 and has some (IMO valid) criticisms that the repercussions need to be clarified\r\n* ```Spec.from_dict``` should set _concrete (perhaps if it doesn't change after concretization)\r\n* ```Spec.to_dict``` should record whether the spec was concrete",
    "user": "scheibelp",
    "url": "https://api.github.com/repos/spack/spack/issues/3887",
    "updated_at": "2020-08-20 15:08:50",
    "created_at": "2017-04-18 18:37:01",
    "closed_at": "2020-08-20 15:08:50",
    "state": "closed",
    "title": "Serialized copies of specs do not correctly report is_extension",
    "number": 3887,
    "milestone": null,
    "labels": [
        "extensions"
    ],
    "id": 222507136,
    "html_url": "https://github.com/spack/spack/issues/3887",
    "assignees": [
        "scheibelp"
    ],
    "comments": 3
}