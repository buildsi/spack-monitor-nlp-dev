{
    "body": "I know it is possible to force spack to install a package using a concrete version for a dependency through the command line in this way:\n\n`spack install Package ^Spec@X.Y.Z`\n\nNow, I want to use spack to install a batch of packages, not only one. Each package have to use a concrete version, so I define a dictionary in a file (or a json, or similar) with the structure:\n\n```\n#external file\n\npackages = {\n    pkg1 : version_pkg1,\n    pkg2 : version_pkg2,\n    ...\n}\n```\n\nSo I have each package with its version in this file and I can modify the version to install in the next build easily. The problem is that I don't know which is the proper way to force spack to use the specified version in this file for `pk2` when it's a dependency of `pkg1`. In other words, I want to install `pkg1` and I specify the version that I want to install on his dependency `pkg2`. When I run spack to install `pkg1`, have I any method to declare the version of his dependencies without put them explicitly in the spack command?  \n",
    "user": "JavierCVilla",
    "url": "https://api.github.com/repos/spack/spack/issues/1994",
    "updated_at": "2016-10-11 14:34:54",
    "created_at": "2016-10-11 13:59:50",
    "closed_at": "2016-10-11 14:34:54",
    "state": "closed",
    "title": "Which is the correct way to specify the version of a group of dependencies? ",
    "number": 1994,
    "milestone": null,
    "labels": [],
    "id": 182271575,
    "html_url": "https://github.com/spack/spack/issues/1994",
    "assignees": [],
    "comments": 3
}