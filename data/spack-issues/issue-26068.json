{
    "body": "### Steps to reproduce\n\nRunning unit tests locally:\r\n```console\r\n$ spack unit-tests\r\n```\r\nmight result in two tests failing at times on feature branches. Re-running the same tests like:\r\n```console\r\n$ spack unit-test --lf\r\n```\r\nmay result in having them PASSED. So far they does seem to always pass in CI.\n\n### Error message\n\n<details>\r\n\r\n<summary>$ spack unit-test</summary>\r\n\r\n```console\r\n[ ... ]\r\n================================================================= slowest 30 test durations ==================================================================\r\n187.83s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_with_env\r\n142.00s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_bootstrap_gcc\r\n121.75s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_bootstrap_artifacts_buildcache\r\n121.63s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_with_workarounds\r\n101.88s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_read_broken_specs_url\r\n101.55s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_override_runner_attrs\r\n61.38s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_with_external_pkg\r\n61.17s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_for_pr_pipeline\r\n61.13s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_pkg_with_deps\r\n51.08s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_with_cdash_token\r\n41.08s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_temp_storage_url\r\n40.89s call     lib/spack/spack/test/cmd/ci.py::test_ci_generate_with_custom_scripts\r\n15.16s call     lib/spack/spack/test/cmd/versions.py::test_no_versions\r\n13.47s call     lib/spack/spack/test/package_sanity.py::test_get_all_packages\r\n8.86s call     lib/spack/spack/test/spec_semantics.py::test_is_extension_after_round_trip_to_dict[hdf5]\r\n7.42s call     lib/spack/spack/test/cmd/gpg.py::test_gpg\r\n7.01s call     lib/spack/spack/test/cmd/versions.py::test_versions_no_url\r\n6.56s call     lib/spack/spack/test/install.py::test_install_times[mock_archive0]\r\n6.49s call     lib/spack/spack/test/test_suite.py::test_test_ensure_stage\r\n6.19s call     lib/spack/spack/test/spec_semantics.py::test_is_extension_after_round_trip_to_dict[git]\r\n5.20s call     lib/spack/spack/test/cmd/env.py::test_stack_view_multiple_views[mock_archive0]\r\n4.90s call     lib/spack/spack/test/cmd/env.py::test_stack_view_no_activate_without_default[mock_archive0]\r\n4.86s call     lib/spack/spack/test/cmd/env.py::test_stack_view_activate_from_default[mock_archive0]\r\n4.57s call     lib/spack/spack/test/cmd/env.py::test_view_link_roots[mock_archive0]\r\n4.37s call     lib/spack/spack/test/cmd/env.py::test_stack_combinatorial_view[mock_archive0]\r\n4.35s call     lib/spack/spack/test/cmd/env.py::test_stack_view_exclude[mock_archive0]\r\n4.32s call     lib/spack/spack/test/cmd/env.py::test_stack_view_select[mock_archive0]\r\n4.31s call     lib/spack/spack/test/cmd/env.py::test_view_link_all[mock_archive0]\r\n4.24s call     lib/spack/spack/test/cmd/env.py::test_stack_view_select_and_exclude[mock_archive0]\r\n4.08s call     lib/spack/spack/test/package_sanity.py::test_package_version_consistency\r\n========================================================================== FAILURES ==========================================================================\r\n___________________________________________________________________ test_versions_from_git ___________________________________________________________________\r\n\r\nmock_git_version_info = ('/tmp/pytest-of-culpo/pytest-10/test_versions_from_git0/git_repo', 'file.txt', ['c20c6376f728ab7585ca8dc1ee25ff158bd3...7fea5a9e6c3209e6a910d8a', '83c9a484a124d1a1cb82364cf1c19f9a1fc6a14a', '2840933debab120e10288ace43ddc6f02f2e5cfe', ...])\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f3fce4802e0>, mock_packages = <spack.repo.RepoPath object at 0x7f3fce1594f0>\r\n\r\n    def test_versions_from_git(mock_git_version_info, monkeypatch, mock_packages):\r\n        repo_path, filename, commits = mock_git_version_info\r\n        monkeypatch.setattr(spack.package.PackageBase, 'git', 'file://%s' % repo_path,\r\n                            raising=False)\r\n    \r\n        for commit in commits:\r\n>           spec = spack.spec.Spec('git-test-commit@%s' % commit)\r\n\r\nlib/spack/spack/test/versions.py:594: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nlib/spack/spack/spec.py:1119: in __init__\r\n    spec_list = SpecParser(self).parse(spec_like)\r\nlib/spack/spack/parse.py:153: in parse\r\n    return self.do_parse()\r\nlib/spack/spack/spec.py:4717: in do_parse\r\n    spec.version.generate_commit_lookup(pkg)\r\nlib/spack/spack/version.py:489: in generate_commit_lookup\r\n    self.commit_lookup.get(self.string)\r\nlib/spack/spack/version.py:1045: in get\r\n    self.data[commit] = self.lookup_commit(commit)\r\nlib/spack/spack/version.py:1073: in lookup_commit\r\n    self.fetcher.git(\"fetch\", '--tags')\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <exe: ['/usr/bin/git', '-c', 'advice.detachedHead=false']>, args = ('fetch', '--tags'), kwargs = {}, env_arg = None\r\nenv = {'CI_JOB_URL': 'https://some.domain/group/project/-/jobs/42', 'CI_PIPELINE_ID': '7192', 'CI_PIPELINE_URL': 'https://some.domain/group/project/-/pipelines/7', 'COLORTERM': 'truecolor', ...}\r\nEnvironmentModifications = <class 'spack.util.environment.EnvironmentModifications'>, extra_env = {}, fail_on_error = True, ignore_errors = ()\r\nignore_quotes = False, input = None, output = None, error = None\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        \"\"\"Run this executable in a subprocess.\r\n    \r\n            Parameters:\r\n                *args (str): Command-line arguments to the executable to run\r\n    \r\n            Keyword Arguments:\r\n                _dump_env (dict): Dict to be set to the environment actually\r\n                    used (envisaged for testing purposes only)\r\n                env (dict or EnvironmentModifications): The environment with which\r\n                    to run the executable\r\n                extra_env (dict or EnvironmentModifications): Extra items to add to\r\n                    the environment (neither requires nor precludes env)\r\n                fail_on_error (bool): Raise an exception if the subprocess returns\r\n                    an error. Default is True. The return code is available as\r\n                    ``exe.returncode``\r\n                ignore_errors (int or list): A list of error codes to ignore.\r\n                    If these codes are returned, this process will not raise\r\n                    an exception even if ``fail_on_error`` is set to ``True``\r\n                ignore_quotes (bool): If False, warn users that quotes are not needed\r\n                    as Spack does not use a shell. Defaults to False.\r\n                input: Where to read stdin from\r\n                output: Where to send stdout\r\n                error: Where to send stderr\r\n    \r\n            Accepted values for input, output, and error:\r\n    \r\n            * python streams, e.g. open Python file objects, or ``os.devnull``\r\n            * filenames, which will be automatically opened for writing\r\n            * ``str``, as in the Python string type. If you set these to ``str``,\r\n              output and error will be written to pipes and returned as a string.\r\n              If both ``output`` and ``error`` are set to ``str``, then one string\r\n              is returned containing output concatenated with error. Not valid\r\n              for ``input``\r\n            * ``str.split``, as in the ``split`` method of the Python string type.\r\n              Behaves the same as ``str``, except that value is also written to\r\n              ``stdout`` or ``stderr``.\r\n    \r\n            By default, the subprocess inherits the parent's file descriptors.\r\n    \r\n            \"\"\"\r\n        # Environment\r\n        env_arg = kwargs.get('env', None)\r\n    \r\n        # Setup default environment\r\n        env = os.environ.copy() if env_arg is None else {}\r\n        self.default_envmod.apply_modifications(env)\r\n        env.update(self.default_env)\r\n    \r\n        from spack.util.environment import EnvironmentModifications  # no cycle\r\n    \r\n        # Apply env argument\r\n        if isinstance(env_arg, EnvironmentModifications):\r\n            env_arg.apply_modifications(env)\r\n        elif env_arg:\r\n            env.update(env_arg)\r\n    \r\n        # Apply extra env\r\n        extra_env = kwargs.get('extra_env', {})\r\n        if isinstance(extra_env, EnvironmentModifications):\r\n            extra_env.apply_modifications(env)\r\n        else:\r\n            env.update(extra_env)\r\n    \r\n        if '_dump_env' in kwargs:\r\n            kwargs['_dump_env'].clear()\r\n            kwargs['_dump_env'].update(env)\r\n    \r\n        fail_on_error = kwargs.pop('fail_on_error', True)\r\n        ignore_errors = kwargs.pop('ignore_errors', ())\r\n        ignore_quotes = kwargs.pop('ignore_quotes', False)\r\n    \r\n        # If they just want to ignore one error code, make it a tuple.\r\n        if isinstance(ignore_errors, int):\r\n            ignore_errors = (ignore_errors, )\r\n    \r\n        input  = kwargs.pop('input',  None)\r\n        output = kwargs.pop('output', None)\r\n        error  = kwargs.pop('error',  None)\r\n    \r\n        if input is str:\r\n            raise ValueError('Cannot use `str` as input stream.')\r\n    \r\n        def streamify(arg, mode):\r\n            if isinstance(arg, string_types):\r\n                return open(arg, mode), True\r\n            elif arg in (str, str.split):\r\n                return subprocess.PIPE, False\r\n            else:\r\n                return arg, False\r\n    \r\n        ostream, close_ostream = streamify(output, 'w')\r\n        estream, close_estream = streamify(error,  'w')\r\n        istream, close_istream = streamify(input,  'r')\r\n    \r\n        if not ignore_quotes:\r\n            quoted_args = [arg for arg in args if re.search(r'^\"|^\\'|\"$|\\'$', arg)]\r\n            if quoted_args:\r\n                tty.warn(\r\n                    \"Quotes in command arguments can confuse scripts like\"\r\n                    \" configure.\",\r\n                    \"The following arguments may cause problems when executed:\",\r\n                    str(\"\\n\".join([\"    \" + arg for arg in quoted_args])),\r\n                    \"Quotes aren't needed because spack doesn't use a shell. \"\r\n                    \"Consider removing them.\",\r\n                    \"If multiple levels of quotation are required, use \"\r\n                    \"`ignore_quotes=True`.\")\r\n    \r\n        cmd = self.exe + list(args)\r\n    \r\n        escaped_cmd = [\"'%s'\" % arg.replace(\"'\", \"'\\\"'\\\"'\") for arg in cmd]\r\n        cmd_line_string = \" \".join(escaped_cmd)\r\n        tty.debug(cmd_line_string)\r\n    \r\n        try:\r\n            proc = subprocess.Popen(\r\n                cmd,\r\n                stdin=istream,\r\n                stderr=estream,\r\n                stdout=ostream,\r\n                env=env)\r\n            out, err = proc.communicate()\r\n    \r\n            result = None\r\n            if output in (str, str.split) or error in (str, str.split):\r\n                result = ''\r\n                if output in (str, str.split):\r\n                    outstr = text_type(out.decode('utf-8'))\r\n                    result += outstr\r\n                    if output is str.split:\r\n                        sys.stdout.write(outstr)\r\n                if error in (str, str.split):\r\n                    errstr = text_type(err.decode('utf-8'))\r\n                    result += errstr\r\n                    if error is str.split:\r\n                        sys.stderr.write(errstr)\r\n    \r\n            rc = self.returncode = proc.returncode\r\n            if fail_on_error and rc != 0 and (rc not in ignore_errors):\r\n                long_msg = cmd_line_string\r\n                if result:\r\n                    # If the output is not captured in the result, it will have\r\n                    # been stored either in the specified files (e.g. if\r\n                    # 'output' specifies a file) or written to the parent's\r\n                    # stdout/stderr (e.g. if 'output' is not specified)\r\n                    long_msg += '\\n' + result\r\n    \r\n>               raise ProcessError('Command exited with status %d:' %\r\n                                   proc.returncode, long_msg)\r\nE                                  spack.util.executable.ProcessError: Command exited with status 1:\r\nE                                      '/usr/bin/git' '-c' 'advice.detachedHead=false' 'fetch' '--tags'\r\n\r\nlib/spack/spack/util/executable.py:225: ProcessError\r\n------------------------------------------------------------------- Captured stdout setup --------------------------------------------------------------------\r\nInitialized empty Git repository in /tmp/pytest-of-culpo/pytest-10/test_versions_from_git0/git_repo/.git/\r\n[master (root-commit) 31ae5e8] first commit\r\n Date: Tue Sep 1 12:00:00 2020 +0200\r\n 1 file changed, 1 insertion(+)\r\n create mode 100644 file.txt\r\n[master 2ab3982] second commit\r\n Date: Wed Jan 1 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 7295a8d] first 1.x commit\r\n Date: Thu Jan 2 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 3eb2a11] second 1.x commit\r\n Date: Fri Jan 3 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[master 2840933] third main commit\r\n Date: Sat Jan 4 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[master 83c9a48] fourth main commit\r\n Date: Sun Jan 5 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 16105cb] third 1.x commit\r\n Date: Mon Jan 6 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x c20c637] fourth 1.x commit\r\n Date: Tue Jan 7 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n------------------------------------------------------------------- Captured stderr setup --------------------------------------------------------------------\r\nSwitched to a new branch '1.x'\r\nSwitched to branch 'master'\r\nSwitched to branch '1.x'\r\n-------------------------------------------------------------------- Captured stderr call --------------------------------------------------------------------\r\nwarning: no common commits\r\nFrom file:///tmp/pytest-of-culpo/pytest-10/test_versions_from_git0/git_repo\r\n * branch            HEAD       -> FETCH_HEAD\r\n ! [rejected]        1.2        -> 1.2  (would clobber existing tag)\r\n ! [rejected]        v1.0       -> v1.0  (would clobber existing tag)\r\n ! [rejected]        v1.1       -> v1.1  (would clobber existing tag)\r\n ! [rejected]        v2.0       -> v2.0  (would clobber existing tag)\r\n____________________________________________________________________ test_install_commit _____________________________________________________________________\r\n\r\nmock_git_version_info = ('/tmp/pytest-of-culpo/pytest-10/test_install_commit0/git_repo', 'file.txt', ['0fe2e1bd860f8f021fce38df8fa6037fd3a2242...2b6d2c83817673d24b8b7f6', '0324004f60f7eed73541a58ea7912cbcaecf7e57', '1061f03f8116dd7a8a1784f4b9c3b74a6f7326b2', ...])\r\ninstall_mockery = None, mock_packages = <spack.repo.RepoPath object at 0x7f400f803ee0>\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f402c7209d0>\r\n\r\n    def test_install_commit(\r\n            mock_git_version_info, install_mockery, mock_packages, monkeypatch):\r\n        \"\"\"\r\n        Test installing a git package from a commit.\r\n    \r\n        This ensures Spack appropriately associates commit versions with their\r\n        packages in time to do version lookups. Details of version lookup tested elsewhere\r\n        \"\"\"\r\n        repo_path, filename, commits = mock_git_version_info\r\n        monkeypatch.setattr(spack.package.PackageBase,\r\n                            'git', 'file://%s' % repo_path,\r\n                            raising=False)\r\n    \r\n        commit = commits[-1]\r\n>       spec = spack.spec.Spec('git-test-commit@%s' % commit)\r\n\r\nlib/spack/spack/test/cmd/install.py:254: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nlib/spack/spack/spec.py:1119: in __init__\r\n    spec_list = SpecParser(self).parse(spec_like)\r\nlib/spack/spack/parse.py:153: in parse\r\n    return self.do_parse()\r\nlib/spack/spack/spec.py:4717: in do_parse\r\n    spec.version.generate_commit_lookup(pkg)\r\nlib/spack/spack/version.py:489: in generate_commit_lookup\r\n    self.commit_lookup.get(self.string)\r\nlib/spack/spack/version.py:1045: in get\r\n    self.data[commit] = self.lookup_commit(commit)\r\nlib/spack/spack/version.py:1073: in lookup_commit\r\n    self.fetcher.git(\"fetch\", '--tags')\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <exe: ['/usr/bin/git', '-c', 'advice.detachedHead=false']>, args = ('fetch', '--tags'), kwargs = {}, env_arg = None\r\nenv = {'CC': '/home/culpo/PycharmProjects/spack/lib/spack/env/gcc/gcc', 'CI_JOB_URL': 'https://some.domain/group/project/-/jobs/42', 'CI_PIPELINE_ID': '7192', 'CI_PIPELINE_URL': 'https://some.domain/group/project/-/pipelines/7', ...}\r\nEnvironmentModifications = <class 'spack.util.environment.EnvironmentModifications'>, extra_env = {}, fail_on_error = True, ignore_errors = ()\r\nignore_quotes = False, input = None, output = None, error = None\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        \"\"\"Run this executable in a subprocess.\r\n    \r\n            Parameters:\r\n                *args (str): Command-line arguments to the executable to run\r\n    \r\n            Keyword Arguments:\r\n                _dump_env (dict): Dict to be set to the environment actually\r\n                    used (envisaged for testing purposes only)\r\n                env (dict or EnvironmentModifications): The environment with which\r\n                    to run the executable\r\n                extra_env (dict or EnvironmentModifications): Extra items to add to\r\n                    the environment (neither requires nor precludes env)\r\n                fail_on_error (bool): Raise an exception if the subprocess returns\r\n                    an error. Default is True. The return code is available as\r\n                    ``exe.returncode``\r\n                ignore_errors (int or list): A list of error codes to ignore.\r\n                    If these codes are returned, this process will not raise\r\n                    an exception even if ``fail_on_error`` is set to ``True``\r\n                ignore_quotes (bool): If False, warn users that quotes are not needed\r\n                    as Spack does not use a shell. Defaults to False.\r\n                input: Where to read stdin from\r\n                output: Where to send stdout\r\n                error: Where to send stderr\r\n    \r\n            Accepted values for input, output, and error:\r\n    \r\n            * python streams, e.g. open Python file objects, or ``os.devnull``\r\n            * filenames, which will be automatically opened for writing\r\n            * ``str``, as in the Python string type. If you set these to ``str``,\r\n              output and error will be written to pipes and returned as a string.\r\n              If both ``output`` and ``error`` are set to ``str``, then one string\r\n              is returned containing output concatenated with error. Not valid\r\n              for ``input``\r\n            * ``str.split``, as in the ``split`` method of the Python string type.\r\n              Behaves the same as ``str``, except that value is also written to\r\n              ``stdout`` or ``stderr``.\r\n    \r\n            By default, the subprocess inherits the parent's file descriptors.\r\n    \r\n            \"\"\"\r\n        # Environment\r\n        env_arg = kwargs.get('env', None)\r\n    \r\n        # Setup default environment\r\n        env = os.environ.copy() if env_arg is None else {}\r\n        self.default_envmod.apply_modifications(env)\r\n        env.update(self.default_env)\r\n    \r\n        from spack.util.environment import EnvironmentModifications  # no cycle\r\n    \r\n        # Apply env argument\r\n        if isinstance(env_arg, EnvironmentModifications):\r\n            env_arg.apply_modifications(env)\r\n        elif env_arg:\r\n            env.update(env_arg)\r\n    \r\n        # Apply extra env\r\n        extra_env = kwargs.get('extra_env', {})\r\n        if isinstance(extra_env, EnvironmentModifications):\r\n            extra_env.apply_modifications(env)\r\n        else:\r\n            env.update(extra_env)\r\n    \r\n        if '_dump_env' in kwargs:\r\n            kwargs['_dump_env'].clear()\r\n            kwargs['_dump_env'].update(env)\r\n    \r\n        fail_on_error = kwargs.pop('fail_on_error', True)\r\n        ignore_errors = kwargs.pop('ignore_errors', ())\r\n        ignore_quotes = kwargs.pop('ignore_quotes', False)\r\n    \r\n        # If they just want to ignore one error code, make it a tuple.\r\n        if isinstance(ignore_errors, int):\r\n            ignore_errors = (ignore_errors, )\r\n    \r\n        input  = kwargs.pop('input',  None)\r\n        output = kwargs.pop('output', None)\r\n        error  = kwargs.pop('error',  None)\r\n    \r\n        if input is str:\r\n            raise ValueError('Cannot use `str` as input stream.')\r\n    \r\n        def streamify(arg, mode):\r\n            if isinstance(arg, string_types):\r\n                return open(arg, mode), True\r\n            elif arg in (str, str.split):\r\n                return subprocess.PIPE, False\r\n            else:\r\n                return arg, False\r\n    \r\n        ostream, close_ostream = streamify(output, 'w')\r\n        estream, close_estream = streamify(error,  'w')\r\n        istream, close_istream = streamify(input,  'r')\r\n    \r\n        if not ignore_quotes:\r\n            quoted_args = [arg for arg in args if re.search(r'^\"|^\\'|\"$|\\'$', arg)]\r\n            if quoted_args:\r\n                tty.warn(\r\n                    \"Quotes in command arguments can confuse scripts like\"\r\n                    \" configure.\",\r\n                    \"The following arguments may cause problems when executed:\",\r\n                    str(\"\\n\".join([\"    \" + arg for arg in quoted_args])),\r\n                    \"Quotes aren't needed because spack doesn't use a shell. \"\r\n                    \"Consider removing them.\",\r\n                    \"If multiple levels of quotation are required, use \"\r\n                    \"`ignore_quotes=True`.\")\r\n    \r\n        cmd = self.exe + list(args)\r\n    \r\n        escaped_cmd = [\"'%s'\" % arg.replace(\"'\", \"'\\\"'\\\"'\") for arg in cmd]\r\n        cmd_line_string = \" \".join(escaped_cmd)\r\n        tty.debug(cmd_line_string)\r\n    \r\n        try:\r\n            proc = subprocess.Popen(\r\n                cmd,\r\n                stdin=istream,\r\n                stderr=estream,\r\n                stdout=ostream,\r\n                env=env)\r\n            out, err = proc.communicate()\r\n    \r\n            result = None\r\n            if output in (str, str.split) or error in (str, str.split):\r\n                result = ''\r\n                if output in (str, str.split):\r\n                    outstr = text_type(out.decode('utf-8'))\r\n                    result += outstr\r\n                    if output is str.split:\r\n                        sys.stdout.write(outstr)\r\n                if error in (str, str.split):\r\n                    errstr = text_type(err.decode('utf-8'))\r\n                    result += errstr\r\n                    if error is str.split:\r\n                        sys.stderr.write(errstr)\r\n    \r\n            rc = self.returncode = proc.returncode\r\n            if fail_on_error and rc != 0 and (rc not in ignore_errors):\r\n                long_msg = cmd_line_string\r\n                if result:\r\n                    # If the output is not captured in the result, it will have\r\n                    # been stored either in the specified files (e.g. if\r\n                    # 'output' specifies a file) or written to the parent's\r\n                    # stdout/stderr (e.g. if 'output' is not specified)\r\n                    long_msg += '\\n' + result\r\n    \r\n>               raise ProcessError('Command exited with status %d:' %\r\n                                   proc.returncode, long_msg)\r\nE                                  spack.util.executable.ProcessError: Command exited with status 1:\r\nE                                      '/usr/bin/git' '-c' 'advice.detachedHead=false' 'fetch' '--tags'\r\n\r\nlib/spack/spack/util/executable.py:225: ProcessError\r\n------------------------------------------------------------------- Captured stdout setup --------------------------------------------------------------------\r\nInitialized empty Git repository in /tmp/pytest-of-culpo/pytest-10/test_install_commit0/git_repo/.git/\r\n[master (root-commit) e429553] first commit\r\n Date: Wed Jan 8 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+)\r\n create mode 100644 file.txt\r\n[master be5ab0a] second commit\r\n Date: Thu Jan 9 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 2668d3f] first 1.x commit\r\n Date: Fri Jan 10 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 6dd30a6] second 1.x commit\r\n Date: Sat Jan 11 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[master 1061f03] third main commit\r\n Date: Sun Jan 12 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[master 0324004] fourth main commit\r\n Date: Mon Jan 13 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 9849704] third 1.x commit\r\n Date: Tue Jan 14 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n[1.x 0fe2e1b] fourth 1.x commit\r\n Date: Wed Jan 15 12:00:00 2020 +0300\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n------------------------------------------------------------------- Captured stderr setup --------------------------------------------------------------------\r\nSwitched to a new branch '1.x'\r\nSwitched to branch 'master'\r\nSwitched to branch '1.x'\r\n-------------------------------------------------------------------- Captured stderr call --------------------------------------------------------------------\r\nwarning: no common commits\r\nFrom file:///tmp/pytest-of-culpo/pytest-10/test_install_commit0/git_repo\r\n * branch            HEAD       -> FETCH_HEAD\r\n ! [rejected]        1.2        -> 1.2  (would clobber existing tag)\r\n ! [rejected]        v1.0       -> v1.0  (would clobber existing tag)\r\n ! [rejected]        v1.1       -> v1.1  (would clobber existing tag)\r\n ! [rejected]        v2.0       -> v2.0  (would clobber existing tag)\r\n======================================== 2 failed, 2969 passed, 141 skipped, 6 xfailed, 3 xpassed in 1836.77 seconds =========================================\r\n```\r\n\r\n</details>\r\n\n\n### Information on your system\n\n* **Spack:** 0.16.2-4312-8fceaf4a33\r\n* **Python:** 3.8.10\r\n* **Platform:** linux-ubuntu20.04-icelake\r\n* **Concretizer:** clingo\r\n\n\n### General information\n\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\n- [X] I have searched the issues of this repo and believe this is not a duplicate\n- [X] I have run the failing commands in debug mode and reported the output",
    "user": "alalazo",
    "url": "https://api.github.com/repos/spack/spack/issues/26068",
    "updated_at": "2021-10-08 11:23:28",
    "created_at": "2021-09-20 14:11:59",
    "closed_at": "None",
    "state": "open",
    "title": "Spurious local failures of test_install_commit and test_versions_from_git",
    "number": 26068,
    "milestone": null,
    "labels": [
        "bug",
        "tests",
        "maintainers",
        "triage"
    ],
    "id": 1001020604,
    "html_url": "https://github.com/spack/spack/issues/26068",
    "assignees": [
        "alalazo",
        "becker33"
    ],
    "comments": 4
}