{
    "body": "Issue: when external packages are defined with both paths and modules, Spack exhibits a preference for the path part and drops the module part when registering the package in the database. I.e, given this Python in `packages.yaml`:\r\n```\r\n  python:\r\n    version: [3.6.5]\r\n    paths:\r\n      'python@3.6.5 +dbm~optimizations+pic+pythoncmd+shared~tk~ucs4': /our/path/to/deployment/linux-rhel7-x86_64/gcc-6.4.0/python-3.6.5-ukuow6gd2f\r\n    modules:\r\n      'python@3.6.5 +dbm~optimizations+pic+pythoncmd+shared~tk~ucs4': python/3.6\r\n```\r\nAnd installing, e.g., `py-six`, I see the following entry in the database for `python`:\r\n```\r\n      \"external\": {\r\n       \"path\": \"/our/path/to/deployment/linux-rhel7-x86_64/gcc-6.4.0/python-3.6.5-ukuow6gd2f\",\r\n       \"module\": null\r\n      },\r\n\r\n```\r\nNow if I generate modules with autoload enabled, `py-six` will not load the Python module I specified as available.\r\n\r\nThis PR changes the way external paths and modules are registered by considering both together, rather than one after another (this leads to an implicit bias for paths over modules). In addition, when generating the autoload list of modules, modules for external packages will be loaded.\r\n\r\nAny thoughts on this?",
    "user": "matz-e",
    "url": "https://api.github.com/repos/spack/spack/issues/10632",
    "updated_at": "2020-08-21 11:12:29",
    "created_at": "2019-02-18 09:10:01",
    "closed_at": "2020-08-19 08:08:06",
    "state": "closed",
    "title": "modules: fully consider external modules.",
    "number": 10632,
    "milestone": null,
    "labels": [
        "modules",
        "external-packages",
        "revisit"
    ],
    "id": 411370692,
    "html_url": "https://github.com/spack/spack/pull/10632",
    "assignees": [
        "alalazo"
    ],
    "comments": 3
}