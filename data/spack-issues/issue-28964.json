{
    "body": "### Steps to reproduce\n\nI'm using the json-c package with address sanitizer options as a simple example, but this bug isn't particular to that package or those options, it's just an illustration.\r\n\r\nI start by creating two different environment configurations, they are identical except that one sets custom cflags and ldflags for development/debugging purposes:\r\n\r\n```\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> ls\r\njson-c-asan.yaml  json-c.yaml\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> cat json-c.yaml\r\nspack:\r\n  specs:\r\n    - json-c\r\n  concretization: together\r\n  view: true\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> cat json-c-asan.yaml\r\nspack:\r\n  specs:\r\n    - json-c cflags=\"-fsanitize=address -fno-omit-frame-pointer -g -Wall\" ldflags=\"-fsanitize=address\"\r\n  concretization: together\r\n  view: true\r\n```\r\nI then create an environment using the yaml that specifies custom `cflags` and `ldflags`:\r\n\r\n```\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> \r\nspack env create json-c-asan json-c-asan.yaml\r\n==> Updating view at /home/carns/working/src/spack/var/spack/environments/json-c-asan/.spack-env/view\r\n==> Created environment 'json-c-asan' in /home/carns/working/src/spack/var/spack/environments/json-c-asan\r\n==> You can activate this environment with:\r\n==>   spack env activate json-c-asan\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> spack env activate json-c-asan\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> spack install\r\n==> Concretized json-c cflags=\"-fsanitize=address -fno-omit-frame-pointer -g -Wall\" ldflags=\"-fsanitize=address\"\r\n -   4i2cra2  json-c@0.15%gcc@11.2.0 cflags=\"-fsanitize=address -fno-omit-frame-pointer -g -Wall\" ldflags=\"-fsanitize=address\" ~ipo build_type=RelWithDebInfo arch=linux-ubuntu21.10-skylake\r\n -   u7tmc35      ^cmake@3.18.4%gcc@11.2.0 cflags=\"-fsanitize=address -fno-omit-frame-pointer -g -Wall\" ldflags=\"-fsanitize=address\" ~doc+ncurses+openssl+ownlibs~qt build_type=Release patches=bf695e3febb222da2ed94b3beea600650e4318975da90e4a71d6f31a6d5d8c3d arch=linux-ubuntu21.10-skylake\r\n\r\n==> Installing environment json-c-asan\r\n[+] /usr (external cmake-3.18.4-u7tmc355fevlgqmbkix5ryfiurkatb6v)\r\n==> Installing json-c-0.15-4i2cra2gmog2tf6qstkw35ox4jbqbtfy\r\n==> No binary for json-c-0.15-4i2cra2gmog2tf6qstkw35ox4jbqbtfy found: installing from source\r\n==> Using cached archive: /home/carns/working/src/spack/var/spack/cache/_source-cache/archive/b8/b8d80a1ddb718b3ba7492916237bbf86609e9709fb007e7f7d4322f02341a4c6.tar.gz\r\n==> No patches needed for json-c\r\n==> json-c: Executing phase: 'cmake'\r\n==> json-c: Executing phase: 'build'\r\n==> json-c: Executing phase: 'install'\r\n==> json-c: Successfully installed json-c-0.15-4i2cra2gmog2tf6qstkw35ox4jbqbtfy\r\n  Fetch: 0.00s.  Build: 11.42s.  Total: 11.42s.\r\n[+] /home/carns/working/src/spack/opt/spack/linux-ubuntu21.10-skylake/gcc-11.2.0/json-c-0.15-4i2cra2gmog2tf6qstkw35ox4jbqbtfy\r\n==> Updating view at /home/carns/working/src/spack/var/spack/environments/json-c-asan/.spack-env/view\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> spack env deactivate\r\n```\r\nAnd finally I create another environment, without the custom `cflags` or `ldflags`, and install using the `--reuse` option:\r\n```\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> \r\nspack env create json-c json-c.yaml\r\n==> Updating view at /home/carns/working/src/spack/var/spack/environments/json-c/.spack-env/view\r\n==> Created environment 'json-c' in /home/carns/working/src/spack/var/spack/environments/json-c\r\n==> You can activate this environment with:\r\n==>   spack env activate json-c\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> spack env activate json-c\r\ncarns-x1-7g ~/w/d/spack-reuse-cflags-2022-02> spack install --reuse\r\n==> Concretized json-c\r\n[+]  4i2cra2  json-c@0.15%gcc@11.2.0 cflags=\"-fsanitize=address -fno-omit-frame-pointer -g -Wall\" ldflags=\"-fsanitize=address\" ~ipo build_type=RelWithDebInfo arch=linux-ubuntu21.10-skylake\r\n\r\n==> Installing environment json-c\r\n==> All of the packages are already installed\r\n==> Updating view at /home/carns/working/src/spack/var/spack/environments/json-c/.spack-env/view\r\n```\r\nThe second environment reused the package from the previous environment that had been compiled with address sanitizer options, even though they weren't requested in this one.\r\n\r\nI'm not exactly sure if that is a bug, but it is surprising to me so I thought I would report it.  I maintain a variety of software packages and like being able to switch back and forth between different build scenarios for development and debugging.  I would like to use the `--reuse` option to avoid piling up so many packages when I switch back and forth between development efforts, but I can't because it pollutes the build environment when I do that.\r\n\n\n### Error message\n\nThere is no error.  I was just surprised that spack would reuse packages with differing build options.\n\n### Information on your system\n\n```\r\n* **Spack:** 0.17.1-1200-c987d06a19\r\n* **Python:** 3.9.7\r\n* **Platform:** linux-ubuntu21.10-skylake\r\n* **Concretizer:** clingo\r\n```\r\n\n\n### General information\n\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\n- [X] I have searched the issues of this repo and believe this is not a duplicate\n- [X] I have run the failing commands in debug mode and reported the output",
    "user": "carns",
    "url": "https://api.github.com/repos/spack/spack/issues/28964",
    "updated_at": "2022-02-17 14:01:05",
    "created_at": "2022-02-15 21:06:12",
    "closed_at": "None",
    "state": "open",
    "title": "install --reuse will select packages with incompatible cflags and ldflags",
    "number": 28964,
    "milestone": null,
    "labels": [
        "bug",
        "concretization",
        "triage",
        "concretizer-use-case"
    ],
    "id": 1139214011,
    "html_url": "https://github.com/spack/spack/issues/28964",
    "assignees": [],
    "comments": 4
}