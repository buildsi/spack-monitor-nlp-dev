{
    "body": "I would like a method for filtering a package's run environment, that\r\nis the variables that produce its module file (setenv, unsetenv, etc).\r\n\r\nFor example, see #21613.  There, hpctoolkit (optionally) depends on\r\nROCM, CUDA, etc.  This causes variables like HIP_PATH to be pulled\r\ninto hpctoolkit's module file and this interferes with an app building\r\nitself because it's using the hpctoolkit value instead of its own.\r\nHpctoolkit is a tool, not a build package and we don't use these variables\r\nourselves.\r\n\r\nWhat I'd like is a method like `filter_run_environment()` that uses a\r\ncallback function, iterates through the env_modifications, and removes\r\nthe selected items.  I can use that to remove the troublesome\r\nvariables and so loading the hpctoolkit module won't break building\r\nthe app.\r\n\r\nNote: I'm not blocked.  I can use `setup_run_environment()` and remove\r\nthe necessary variables manually.  The only problem with that is that\r\nit exposes the internals of env_modifications as a python list.\r\n\r\nWhat I'm looking for is a more structured way of doing this that\r\ndoesn't expose the internals of env_modifications.\r\n\r\nOr, maybe hpctoolkit is an unusual case, I'm the only one and we can\r\njust live with one special package, I don't know.  Encapsulation is\r\ngood, but if I'm the only one, then maybe it's not worth it.\r\n\r\nping @alalazo from #21613\r\n",
    "user": "mwkrentel",
    "url": "https://api.github.com/repos/spack/spack/issues/21694",
    "updated_at": "2021-02-18 22:44:46",
    "created_at": "2021-02-16 06:06:40",
    "closed_at": "None",
    "state": "open",
    "title": "feature: add method for filtering a package's run environment",
    "number": 21694,
    "milestone": null,
    "labels": [
        "feature"
    ],
    "id": 809015443,
    "html_url": "https://github.com/spack/spack/issues/21694",
    "assignees": [
        "alalazo"
    ],
    "comments": 2
}