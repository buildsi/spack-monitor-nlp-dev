{
    "body": "### Steps to reproduce\n\n```\r\n=================================== FAILURES ===================================\r\n________________________ test_ci_rebuild[mock_archive0] ________________________\r\n\r\ntmpdir = local('/tmp/pytest-of-spack-test/pytest-0/test_ci_rebuild_mock_archive0_0')\r\nmutable_mock_env_path = local('/tmp/pytest-of-spack-test/pytest-0/mock-env-path4')\r\ninstall_mockery = None\r\nmock_packages = <spack.repo.RepoPath object at 0x6cc5e90>\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch instance at 0x8ed9050>\r\nmock_gnupghome = '/tmp/tmpv5lVPZ', mock_fetch = None\r\nproject_dir_env = <function _set_project_dir at 0x89eade8>\r\nmock_binary_index = None\r\n\r\n    def test_ci_rebuild(tmpdir, mutable_mock_env_path,\r\n                        install_mockery, mock_packages, monkeypatch,\r\n                        mock_gnupghome, mock_fetch, project_dir_env,\r\n                        mock_binary_index):\r\n        project_dir_env(tmpdir.strpath)\r\n        working_dir = tmpdir.join('working_dir')\r\n    \r\n        log_dir = os.path.join(working_dir.strpath, 'logs')\r\n        repro_dir = os.path.join(working_dir.strpath, 'repro')\r\n        env_dir = working_dir.join('concrete_env')\r\n    \r\n        mirror_dir = working_dir.join('mirror')\r\n        mirror_url = 'file://{0}'.format(mirror_dir.strpath)\r\n    \r\n        broken_specs_path = os.path.join(working_dir.strpath, 'naughty-list')\r\n        broken_specs_url = url_util.join('file://', broken_specs_path)\r\n        temp_storage_url = 'file:///path/to/per/pipeline/storage'\r\n    \r\n        ci_job_url = 'https://some.domain/group/project/-/jobs/42'\r\n        ci_pipeline_url = 'https://some.domain/group/project/-/pipelines/7'\r\n    \r\n        signing_key_dir = spack_paths.mock_gpg_keys_path\r\n        signing_key_path = os.path.join(signing_key_dir, 'package-signing-key')\r\n        with open(signing_key_path) as fd:\r\n            signing_key = fd.read()\r\n    \r\n        spack_yaml_contents = \"\"\"\r\n    spack:\r\n     definitions:\r\n       - packages: [archive-files]\r\n     specs:\r\n       - $packages\r\n     mirrors:\r\n       test-mirror: {0}\r\n     gitlab-ci:\r\n       broken-specs-url: {1}\r\n       temporary-storage-url-prefix: {2}\r\n       mappings:\r\n         - match:\r\n             - archive-files\r\n           runner-attributes:\r\n             tags:\r\n               - donotcare\r\n             image: donotcare\r\n     cdash:\r\n       build-group: Not important\r\n       url: https://my.fake.cdash\r\n       project: Not used\r\n       site: Nothing\r\n    \"\"\".format(mirror_url, broken_specs_url, temp_storage_url)\r\n    \r\n        filename = str(tmpdir.join('spack.yaml'))\r\n        with open(filename, 'w') as f:\r\n            f.write(spack_yaml_contents)\r\n    \r\n        with tmpdir.as_cwd():\r\n            env_cmd('create', 'test', './spack.yaml')\r\n            with ev.read('test') as env:\r\n                with env.write_transaction():\r\n                    env.concretize()\r\n                    env.write()\r\n    \r\n                if not os.path.exists(env_dir.strpath):\r\n                    os.makedirs(env_dir.strpath)\r\n    \r\n                shutil.copyfile(env.manifest_path,\r\n                                os.path.join(env_dir.strpath, 'spack.yaml'))\r\n                shutil.copyfile(env.lock_path,\r\n                                os.path.join(env_dir.strpath, 'spack.lock'))\r\n    \r\n                root_spec_build_hash = None\r\n                job_spec_dag_hash = None\r\n                job_spec_full_hash = None\r\n    \r\n                for h, s in env.specs_by_hash.items():\r\n                    if s.name == 'archive-files':\r\n                        root_spec_build_hash = h\r\n                        job_spec_dag_hash = s.dag_hash()\r\n                        job_spec_full_hash = s.full_hash()\r\n    \r\n                assert root_spec_build_hash\r\n                assert job_spec_dag_hash\r\n                assert job_spec_full_hash\r\n    \r\n        def fake_cdash_register(build_name, base_url, project, site, track):\r\n            return ('fakebuildid', 'fakestamp')\r\n    \r\n        monkeypatch.setattr(ci, 'register_cdash_build', fake_cdash_register)\r\n    \r\n        monkeypatch.setattr(spack.cmd.ci, 'CI_REBUILD_INSTALL_BASE_ARGS', [\r\n            'notcommand'\r\n        ])\r\n        monkeypatch.setattr(spack.cmd.ci, 'INSTALL_FAIL_CODE', 127)\r\n    \r\n        with env_dir.as_cwd():\r\n            env_cmd('activate', '--without-view', '--sh', '-d', '.')\r\n    \r\n            # Create environment variables as gitlab would do it\r\n            set_env_var('SPACK_ARTIFACTS_ROOT', working_dir.strpath)\r\n            set_env_var('SPACK_JOB_LOG_DIR', log_dir)\r\n            set_env_var('SPACK_JOB_REPRO_DIR', repro_dir)\r\n            set_env_var('SPACK_LOCAL_MIRROR_DIR', mirror_dir.strpath)\r\n            set_env_var('SPACK_CONCRETE_ENV_DIR', env_dir.strpath)\r\n            set_env_var('CI_PIPELINE_ID', '7192')\r\n            set_env_var('SPACK_SIGNING_KEY', signing_key)\r\n            set_env_var('SPACK_ROOT_SPEC', root_spec_build_hash)\r\n            set_env_var('SPACK_JOB_SPEC_DAG_HASH', job_spec_dag_hash)\r\n            set_env_var('SPACK_JOB_SPEC_PKG_NAME', 'archive-files')\r\n            set_env_var('SPACK_COMPILER_ACTION', 'NONE')\r\n            set_env_var('SPACK_CDASH_BUILD_NAME', '(specs) archive-files')\r\n            set_env_var('SPACK_RELATED_BUILDS_CDASH', '')\r\n            set_env_var('SPACK_REMOTE_MIRROR_URL', mirror_url)\r\n            set_env_var('SPACK_PIPELINE_TYPE', 'spack_protected_branch')\r\n            set_env_var('CI_JOB_URL', ci_job_url)\r\n            set_env_var('CI_PIPELINE_URL', ci_pipeline_url)\r\n    \r\n            ci_cmd('rebuild', fail_on_error=False)\r\n    \r\n            expected_repro_files = [\r\n                'install.sh',\r\n                'root.yaml',\r\n                'archive-files.yaml',\r\n                'spack.yaml',\r\n                'spack.lock'\r\n            ]\r\n            repro_files = os.listdir(repro_dir)\r\n>           assert(all([f in repro_files for f in expected_repro_files]))\r\nE           assert False\r\nE            +  where False = all([False, True, True, True, True])\r\n\r\nlib/spack/spack/test/cmd/ci.py:806: AssertionError\r\n---------------------------- Captured stderr setup -----------------------------\r\ngpgconf: invalid option \"--create-socketdir\"\r\n----------------------------- Captured stdout call -----------------------------\r\n/tmp/tmpv5lVPZ/pubring.gpg\r\n--------------------------\r\npub   2048R/BF181183 2019-12-10\r\nuid                  Spack Build Pipeline (Demo Key) <key@spack.demo>\r\nsub   2048R/25AAAD63 2019-12-10\r\n\r\n/tmp/tmpv5lVPZ/pubring.gpg\r\n--------------------------\r\npub   2048R/BF181183 2019-12-10\r\nuid                  Spack Build Pipeline (Demo Key) <key@spack.demo>\r\nsub   2048R/25AAAD63 2019-12-10\r\n\r\n/tmp/tmpv5lVPZ/secring.gpg\r\n--------------------------\r\nsec   2048R/BF181183 2019-12-10\r\nuid                  Spack Build Pipeline (Demo Key) <key@spack.demo>\r\nssb   2048R/25AAAD63 2019-12-10\r\n\r\n----------------------------- Captured stderr call -----------------------------\r\ngpg: keyring `/tmp/tmpv5lVPZ/pubring.gpg' created\r\ngpg: /tmp/tmpv5lVPZ/trustdb.gpg: trustdb created\r\ngpg: key BF181183: public key \"Spack Build Pipeline (Demo Key) <key@spack.demo>\" imported\r\ngpg: key BF181183: secret key imported\r\ngpg: key BF181183: \"Spack Build Pipeline (Demo Key) <key@spack.demo>\" not changed\r\ngpg: Total number processed: 2\r\ngpg:               imported: 1  (RSA: 1)\r\ngpg:              unchanged: 1\r\ngpg:       secret keys read: 1\r\ngpg:   secret keys imported: 1\r\ngpg: inserting ownertrust of 6\r\ngpg: checking the trustdb\r\ngpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model\r\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\r\n!!!!!!!!!!!!!!!!!!!! Interrupted: stopping after 1 failures !!!!!!!!!!!!!!!!!!!!\r\n==================== 1 failed, 174 passed in 85.21 seconds =====================\r\n```\r\n\r\n@scottwittenburg could you please make the reported output a bit more verbose to give us a hint *what* fails if it fails? Right now the test doesn't given any feedback whatsoever.\n\n### Error message\n\n.\n\n### Information on your system\n\n.\n\n### General information\n\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\n- [X] I have searched the issues of this repo and believe this is not a duplicate\n- [X] I have run the failing commands in debug mode and reported the output",
    "user": "haampie",
    "url": "https://api.github.com/repos/spack/spack/issues/26683",
    "updated_at": "2021-10-12 16:24:58",
    "created_at": "2021-10-12 16:22:57",
    "closed_at": "None",
    "state": "open",
    "title": "Spurious test failures ci tests",
    "number": 26683,
    "milestone": null,
    "labels": [
        "bug",
        "triage"
    ],
    "id": 1024010605,
    "html_url": "https://github.com/spack/spack/issues/26683",
    "assignees": [],
    "comments": 1
}