{
    "body": "This error was reported by @s-sajid-ali over Slack:\r\n```\r\n==> Installing py-tensorflow\r\n==> Searching for binary cache of py-tensorflow\r\n==> No binary for py-tensorflow found: installing from source\r\n==> Error: ValueError: could not convert string to float: 'none'\r\n/home/sajid/packages/spack/var/spack/repos/builtin/packages/py-tensorflow/package.py:428, in setup_build_environment:\r\n        425            # only supports compute capabilities >= 3.5\r\n        426            if spec.variants['cuda_arch'].value != 'none':\r\n        427                capabilities = ','.join('{0:.1f}'.format(\r\n  >>    428                    float(i) / 10.0) for i in spec.variants['cuda_arch'].value)\r\n        429                env.set('TF_CUDA_COMPUTE_CAPABILITIES', capabilities)\r\n        430        else:\r\n        431            env.set('TF_NEED_CUDA', '0')\r\n```\r\nIt seems I didn't correctly check for `'none'` in the `cuda_arch` values. In hindsight, I'm pretty sure `configure` will hang without any warning message if `TF_CUDA_COMPUTE_CAPABILITIES` isn't set (maybe @Sinan81 or @healther can confirm), so the right thing to do is crash if `+cuda cuda_arch=none`.\r\n\r\nAlso added checks for supported CUDA compute capability versions.\r\n\r\n@tgamblin @becker33 @scheibelp @alalazo are there any plans to automatically detect GPU versions and include that information in the spec someday?",
    "user": "adamjstewart",
    "url": "https://api.github.com/repos/spack/spack/issues/14118",
    "updated_at": "2019-12-12 02:16:56",
    "created_at": "2019-12-11 19:57:13",
    "closed_at": "2019-12-12 02:16:53",
    "state": "closed",
    "title": "TensorFlow: must specify CUDA compute capabilities",
    "number": 14118,
    "milestone": null,
    "labels": [
        "conflicts"
    ],
    "id": 536582666,
    "html_url": "https://github.com/spack/spack/pull/14118",
    "assignees": [],
    "comments": 1
}