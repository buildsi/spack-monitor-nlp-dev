{
    "body": "This PR adds information about package tests to the `info` command output.  The titles are based on #22210 distinctions between installation phase-time tests and stand-alone/smoke tests.\r\n\r\nBased on feedback, this PR also makes most sections optional and provides an `--all` option.  The core sections are the type and package name, package description, and home page.  All other sections are optional and, when included, are reported in their original  order.\r\n\r\nThe new help output is:\r\n```\r\nusage: spack info [-ha] [--dependencies] [--detectable] [--maintainers]\r\n                  [--phases] [--tags] [--tests] [--variants] [--versions]\r\n                  [--virtuals]\r\n                  package\r\n\r\nget detailed information on a particular package\r\n\r\npositional arguments:\r\n  package         package name\r\n\r\noptional arguments:\r\n  --dependencies  output any build, link, and run package dependencies\r\n  --detectable    output information on external detection\r\n  --maintainers   output any package maintainers\r\n  --phases        output any installation phases\r\n  --tags          output any package tags\r\n  --tests         output relevant build-time and stand-alone tests\r\n  --variants      output any variants\r\n  --versions      output any versions\r\n  --virtuals      output any virtual packages\r\n  -a, --all       output all package information\r\n  -h, --help      show this help message and exit\r\n```\r\n\r\nAn example with default information:\r\n```\r\n$ spack info mpich\r\nAutotoolsPackage:   mpich\r\n\r\nDescription:\r\n    MPICH is a high performance and widely portable implementation of the\r\n    Message Passing Interface (MPI) standard.\r\n\r\nHomepage: https://www.mpich.org\r\n```\r\nand with the default plus versions:\r\n```\r\n$ spack info --versions mpich\r\nAutotoolsPackage:   mpich\r\n\r\nDescription:\r\n    MPICH is a high performance and widely portable implementation of the\r\n    Message Passing Interface (MPI) standard.\r\n\r\nHomepage: https://www.mpich.org\r\n\r\nPreferred version:  \r\n    3.4.2      https://www.mpich.org/static/downloads/3.4.2/mpich-3.4.2.tar.gz\r\n\r\nSafe versions:  \r\n    develop    [git] https://github.com/pmodels/mpich.git\r\n    3.4.2      https://www.mpich.org/static/downloads/3.4.2/mpich-3.4.2.tar.gz\r\n    3.4.1      https://www.mpich.org/static/downloads/3.4.1/mpich-3.4.1.tar.gz\r\n    3.4        https://www.mpich.org/static/downloads/3.4/mpich-3.4.tar.gz\r\n    3.3.2      https://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz\r\n    3.3.1      https://www.mpich.org/static/downloads/3.3.1/mpich-3.3.1.tar.gz\r\n    3.3        https://www.mpich.org/static/downloads/3.3/mpich-3.3.tar.gz\r\n    3.2.1      https://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz\r\n    3.2        https://www.mpich.org/static/downloads/3.2/mpich-3.2.tar.gz\r\n    3.1.4      https://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz\r\n    3.1.3      https://www.mpich.org/static/downloads/3.1.3/mpich-3.1.3.tar.gz\r\n    3.1.2      https://www.mpich.org/static/downloads/3.1.2/mpich-3.1.2.tar.gz\r\n    3.1.1      https://www.mpich.org/static/downloads/3.1.1/mpich-3.1.1.tar.gz\r\n    3.1        https://www.mpich.org/static/downloads/3.1/mpich-3.1.tar.gz\r\n    3.0.4      https://www.mpich.org/static/downloads/3.0.4/mpich-3.0.4.tar.gz\r\n\r\nDeprecated versions:  \r\n    None\r\n```\r\n\r\nExamples of only showing the test output are:\r\n\r\n```\r\n$ spack info --tests mpich\r\nAutotoolsPackage:   mpich\r\n\r\nDescription:\r\n    MPICH is a high performance and widely portable implementation of the\r\n    Message Passing Interface (MPI) standard.\r\n\r\nHomepage: https://www.mpich.org\r\n\r\nAvailable Build Phase Test Methods:\r\n    check\r\n\r\nAvailable Install Phase Test Methods:\r\n    installcheck\r\n\r\nStand-Alone/Smoke Test Methods:\r\n    mpi.test  mpich.test\r\n\r\n$ spack info py-numpy\r\nPythonPackage:   py-numpy\r\n\r\nDescription:\r\n    NumPy is the fundamental package for scientific computing with Python.\r\n    It contains among other things: a powerful N-dimensional array object,\r\n    sophisticated (broadcasting) functions, tools for integrating C/C++ and\r\n    Fortran code, and useful linear algebra, Fourier transform, and random\r\n    number capabilities\r\n\r\nHomepage: https://numpy.org/\r\n\r\nAvailable Build Phase Test Methods:\r\n    None\r\n\r\nAvailable Install Phase Test Methods:\r\n    test\r\n\r\nStand-Alone/Smoke Test Methods:\r\n    pythonpackage.test\r\n\r\n$ spack info intel-parallel-studio\r\nIntelPackage:   intel-parallel-studio\r\n\r\nDescription:\r\n    Intel Parallel Studio.\r\n\r\nHomepage: https://software.intel.com/en-us/intel-parallel-studio-xe\r\n\r\nAvailable Build Phase Test Methods:\r\n    None\r\n\r\nAvailable Install Phase Test Methods:\r\n    None\r\n\r\nStand-Alone/Smoke Test Methods:\r\n    c.test  cxx.test  fortran.test  mpi.test\r\n```\r\n\r\nAn outstanding issue is whether the approach taken above adequately conveys the fact that `build_time_test_callbacks` and `install_time_test_callbacks` in packages, such as `AutotoolsPackage` and `MakefilePackage`, are automatically run after the correspondingly named phases *IF* the corresponding standard targets are available.  Unfortunately, we don't readily have a way to confirm that those targets are actually implemented in the packages.",
    "user": "tldahlgren",
    "url": "https://api.github.com/repos/spack/spack/issues/22097",
    "updated_at": "2021-12-18 01:09:04",
    "created_at": "2021-03-05 00:25:57",
    "closed_at": "None",
    "state": "open",
    "title": "spack info: make sections optional; add build/stand-alone test information",
    "number": 22097,
    "milestone": null,
    "labels": [
        "documentation",
        "tests",
        "commands",
        "stand-alone-tests"
    ],
    "id": 822624987,
    "html_url": "https://github.com/spack/spack/pull/22097",
    "assignees": [
        "tgamblin",
        "alalazo",
        "tldahlgren"
    ],
    "comments": 12
}