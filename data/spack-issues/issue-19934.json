{
    "body": "I am using a `spack.yaml` file to create an environment inside a Docker container. In order to keep configuration simple and to a minimum I am putting all of it into `spack.yaml`. In particular, I would like to use a particular version of `gcc` to build all of my specs (8.4.0). Here's an example of what my `spack.yaml` looks like:\r\n\r\n```yaml\r\nspack:\r\n    specs:\r\n        - python@3.7.8\r\n        - py-pip\r\n    concretization: together\r\n    view: true\r\n    packages:\r\n        all:\r\n            compiler:: [gcc@8.4.0]\r\n        gcc:\r\n            version: [8.4.0]\r\n            buildable: true\r\n    config:\r\n        install_missing_compilers: true\r\n```\r\n\r\n### Steps to reproduce the issue\r\n\r\nTo build the Docker image, I copy the `spack.yaml` file to `/etc/spack.yaml` in the container, clone a fresh copy of `spack`, and create an environment. E.g.:\r\n\r\n```dockerfile\r\nCOPY spack.yaml /etc/\r\nRUN git clone $SPACK_URL $SPACK_ROOT && \\\r\n. $SPACK_ROOT/share/spack/setup-env.sh && \\\r\nspack env create myenv /etc/spack.yaml && \\\r\nspack activate myenv && \\\r\nspack install\r\n```\r\nMy expectation is that `spack` will use `gcc@8.4.0` to build Python and will build `gcc@8.4.0` in the process. However, `spack` uses the system `gcc` instead (4.8.5).\r\n\r\nImportantly, in keeping with the double colon after `compiler` in the `all` section of `packages`, after the environment is activated if I run `spack config get packages` it shows `gcc@8.4.0` as the only suggested compiler:\r\n\r\n```console\r\n$ spack config get packages\r\npackages:\r\n  all:\r\n    compiler: [gcc@8.4.0]\r\n    providers:\r\n      D: [ldc]\r\n      awk: [gawk]\r\n      blas: [openblas]\r\n      daal: [intel-daal]\r\n      elf: [elfutils]\r\n      fftw-api: [fftw]\r\n      gl: [mesa+opengl, opengl]\r\n      glx: [mesa+glx, opengl]\r\n      glu: [mesa-glu, openglu]\r\n      golang: [gcc]\r\n      iconv: [libiconv]\r\n      ipp: [intel-ipp]\r\n      java: [openjdk, jdk, ibm-java]\r\n      jpeg: [libjpeg-turbo, libjpeg]\r\n      lapack: [openblas]\r\n      mariadb-client: [mariadb-c-client, mariadb]\r\n      mkl: [intel-mkl]\r\n      mpe: [mpe2]\r\n      mpi: [openmpi, mpich]\r\n      mysql-client: [mysql, mariadb-c-client]\r\n      opencl: [pocl]\r\n      pil: [py-pillow]\r\n      pkgconfig: [pkgconf, pkg-config]\r\n      rpc: [libtirpc]\r\n      scalapack: [netlib-scalapack]\r\n      sycl: [hipsycl]\r\n      szip: [libszip, libaec]\r\n      tbb: [intel-tbb]\r\n      unwind: [libunwind]\r\n    permissions:\r\n      read: world\r\n      write: user\r\n    buildable: true\r\n    version: []\r\n    target: []\r\n  gcc:\r\n    version: [8.4.0]\r\n    buildable: true\r\n    target: []\r\n    providers: {}\r\n    compiler: []\r\n```\r\n\r\nWhereas if you just make it a single colon it merely prepends `gcc@8.4.0` to the list of suggested compilers:\r\n\r\n```console\r\n$ spack config get packages\r\npackages:\r\n  all:\r\n    compiler: [gcc@8.4.0, gcc, intel, pgi, clang, xl, nag, fj]\r\n    providers:\r\n      D: [ldc]\r\n      awk: [gawk]\r\n      blas: [openblas]\r\n      daal: [intel-daal]\r\n      elf: [elfutils]\r\n      fftw-api: [fftw]\r\n      gl: [mesa+opengl, opengl]\r\n      glx: [mesa+glx, opengl]\r\n      glu: [mesa-glu, openglu]\r\n      golang: [gcc]\r\n      iconv: [libiconv]\r\n      ipp: [intel-ipp]\r\n      java: [openjdk, jdk, ibm-java]\r\n      jpeg: [libjpeg-turbo, libjpeg]\r\n      lapack: [openblas]\r\n      mariadb-client: [mariadb-c-client, mariadb]\r\n      mkl: [intel-mkl]\r\n      mpe: [mpe2]\r\n      mpi: [openmpi, mpich]\r\n      mysql-client: [mysql, mariadb-c-client]\r\n      opencl: [pocl]\r\n      pil: [py-pillow]\r\n      pkgconfig: [pkgconf, pkg-config]\r\n      rpc: [libtirpc]\r\n      scalapack: [netlib-scalapack]\r\n      sycl: [hipsycl]\r\n      szip: [libszip, libaec]\r\n      tbb: [intel-tbb]\r\n      unwind: [libunwind]\r\n    permissions:\r\n      read: world\r\n      write: user\r\n    buildable: true\r\n    version: []\r\n    target: []\r\n  gcc:\r\n    version: [8.4.0]\r\n    buildable: true\r\n    target: []\r\n    providers: {}\r\n    compiler: []\r\n```\r\n\r\nSince I have pinned `gcc` to version 8.4.0, in the above case you would doubly expect `spack` to use `gcc@8.4.0` regardless.\r\n\r\nIf I directly specify in the Python spec that I want to compile with `gcc@8.4.0`, then `spack` does build `gcc@8.4.0` before building Python with it. I.e. this works:\r\n\r\n```yaml\r\nspack:\r\n    specs:\r\n        - python@3.7.8 %gcc@8.4.0\r\n        - py-pip\r\n    concretization: together\r\n    view: true\r\n    config:\r\n        install_missing_compilers: true\r\n```\r\n\r\nIt seems that the `packages` section is not used for compiler selection during concretization if the compiler is not already present even with `install_missing_compilers: true`.\r\n\r\n### Information on your system\r\n\r\n```bash\r\n$ spack debug report\r\n* **Spack:** 0.14.1-2401-06b64c3\r\n* **Python:** 2.7.5\r\n* **Platform:** linux-centos7-haswell\r\n```\r\n\r\n### Additional information\r\n\r\n- [x] I have run `spack debug report` and reported the version of Spack/Python/Platform\r\n- [x] I have searched the issues of this repo and believe this is not a duplicate\r\n- [ ] I have run the failing commands in debug mode and reported the output\r\n\r\n\r\n",
    "user": "birnbera",
    "url": "https://api.github.com/repos/spack/spack/issues/19934",
    "updated_at": "2020-11-17 13:51:37",
    "created_at": "2020-11-16 06:38:47",
    "closed_at": "None",
    "state": "open",
    "title": "Spack not using compiler from packages section of spack.yaml",
    "number": 19934,
    "milestone": null,
    "labels": [
        "feature",
        "configuration",
        "compilers",
        "workaround",
        "impact-medium",
        "environments"
    ],
    "id": 743527550,
    "html_url": "https://github.com/spack/spack/issues/19934",
    "assignees": [
        "scheibelp"
    ],
    "comments": 5
}