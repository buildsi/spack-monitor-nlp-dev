{
    "body": "As an example, here are all the compilers that spack knows about on my machine:\r\n```\r\n$ spack compilers\r\n==> Available compilers\r\n-- gcc ubuntu16.04-x86_64 ---------------------------------------\r\ngcc@7.2.0  gcc@6.3.0  gcc@6.1.1  gcc@5.4.0\r\n\r\n-- intel ubuntu16.04-x86_64 ----------------------------------------\r\nintel@16.0.2\r\n```\r\nBut spack only generated module files for one compiler out of the five:\r\n```\r\n$ module available intel\r\n$ module available gcc\r\n---- /home/certik/repos/spack/share/spack/modules/linux-ubuntu16.04-x86_64 -----\r\ngcc-7.2.0-gcc-6.3.0-sodkgqz\r\n```\r\nIt would be nice if spack could generate module files for all four compilers, whether or not they were built by spack.\r\n\r\n\r\nCurrently spack only produces module files for compilers that it built itself. As an example, Intel compilers have a load script that I have to run by hand: `. $HOME/intel/bin/compilervars.sh intel64` when I want to use them. So I loaded them, then I did `spack compiler find`, that finds them, and then spack can use them without me having to load them using `compilervars.sh` again.\r\n\r\nHowever, when I develop my own software, I load the spack built compilers using `module load`, but for Intel and other compilers I have to load them in a specific way. It would be nice if spack could (optionally) generate module files for all the compilers and then I can uniformly load them using `module load`.\r\n",
    "user": "certik",
    "url": "https://api.github.com/repos/spack/spack/issues/5684",
    "updated_at": "2018-07-05 14:38:38",
    "created_at": "2017-10-10 20:54:21",
    "closed_at": "2018-07-05 14:38:38",
    "state": "closed",
    "title": "Make spack produce module files for all compilers it knows about",
    "number": 5684,
    "milestone": null,
    "labels": [
        "compilers",
        "modules"
    ],
    "id": 264372644,
    "html_url": "https://github.com/spack/spack/issues/5684",
    "assignees": [
        "alalazo"
    ],
    "comments": 3
}