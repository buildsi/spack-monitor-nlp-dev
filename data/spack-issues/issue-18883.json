{
    "body": "Multiple projection keys (e.g., ^mpi^libfabric) default to the single key form (e.g., ^mpi). \r\n\r\n### Steps to Reproduce\r\n\r\n```\r\nprojections:\r\n      all: '{name}/{version}-{compiler.name}-{compiler.version}'\r\n      ^mpi^libfabric: '{name}/{version}-{^mpi.name}-{^mpi.version}-{^libfabric.name}-{^libfabric.version}-{compiler.name}-{compiler.version}'\r\n      ^mpi: '{name}/{version}-{^mpi.name}-{^mpi.version}-{compiler.name}-{compiler.version}'\r\n```\r\nI expect the 2nd expression to be selected, but the third is chosen on all modules that have both mpi and libfabric deps.\r\n\r\n### Workaround\r\nI can get the right projections with this:\r\n```\r\n    projections:\r\n      all: '{name}/{version}-{compiler.name}-{compiler.version}'\r\n      ^libfabric: '{name}/{version}-{^mpi.name}-{^mpi.version}-{^libfabric.name}-{^libfabric.version}-{compiler.name}-{compiler.version}'\r\n      ^mpi: '{name}/{version}-{^mpi.name}-{^mpi.version}-{compiler.name}-{compiler.version}'\r\n```\r\nBut I imagine some cases where libraries I'd like to include are not guaranteed to also come with ^mpi. e.g., packages that link against MKL may or may not have been built with impi/openmpi.",
    "user": "bollig",
    "url": "https://api.github.com/repos/spack/spack/issues/18883",
    "updated_at": "2020-09-23 07:47:59",
    "created_at": "2020-09-23 07:45:30",
    "closed_at": "None",
    "state": "open",
    "title": "Package projection order",
    "number": 18883,
    "milestone": null,
    "labels": [
        "bug",
        "triage"
    ],
    "id": 707130220,
    "html_url": "https://github.com/spack/spack/issues/18883",
    "assignees": [],
    "comments": 1
}