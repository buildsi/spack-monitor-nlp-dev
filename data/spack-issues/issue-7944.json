{
    "body": "@scheibelp @tgamblin \r\nThe ideas in this Issue might get implemented, but only after the current Environnments PR (#7843) is merged.\r\n\r\nRather than a `spack env` command that increasingly duplicates much of Spack, Environments should be integrated into existing Spack commands.  The following commands could be \"environmentized\": find, all \"build packages\" commands, all \"environment\" commands (in spack help --all), module.\r\n\r\nCommands would be run with an environment in maybe one of a few ways:\r\n 1. `spack --env <env> command ...` --- works for all commands, but only makes a difference for commands where it makes sense.\r\n 2. `SPACK_ENV=<env> spack command ...` --- get the current Spack env out of an env var, but otherwise similar to (1).  Nothing else is done in Spack this way, so probably not what we want.\r\n 3. `spack command --env <env>` --- Add the `--env` flag only for commands where an environment makes a difference.\r\n  4. Don't use any global env specifier; instead, get the required env from the specs on the command line (see below).\r\n\r\nSuppose we have an Environment with user specs `aa`, `bb` and `cc` added to it. Then the following conventions (or something like them) can be used anywhere a spec is asked for on the command line:\r\n1. `env:aa` refers to the `aa` user spec in the current environment.  If `aa` has been concretized, then it will be replaced with the concretized version of `aa` in the env.  NOTE: This is different from just `aa`, which does an immediate concretization.\r\n2. `env:` expands to all user specs in env.\r\n3. `env:aa:` expands to all specs in the `aa` DAG.\r\n4. `env:aa:xx` refers to a spec matching `xx`, which is in the DAG of the concretized `aa` user spec.  This kind of control allows us to easily debug, rebuild, etc. individual problem packages within an environment.\r\n5. `env::xx` refers to a spec matching `xx` anywhere in any DAG in the concretized environment.\r\n6. `env::` expands to ALL SPECS in the environment.\r\n\r\nIN general:\r\n1. Anything wanting an environment has no colons.  Eg: `myenv`\r\n2. Anything wanting a user spec, or list of user specs, or top spec in a DAG, has one colon.  Eg: `myenv:aa` or `myenv:`\r\n3. Anything wanting any spec has two colons.  Eg: `myenv:aa:openblas`.\r\n\r\n`spack install` would work as it currently does: it concretizes and installs all in one.  `spack install` w.r.t an env would add the user spec to the env, concretize it and then build (\"install\") it.  For example, `spack install c1:emacs` would add `emacs` to the `c1` environment, concretize it, and then install.\r\n\r\n`spack add` adds user specs to an environment.  Eg: `spack add c1:emacs`\r\n\r\n`spack concretize` concretizes one or more user specs.  Eg: `spack concretize c1:` or `spack concretize c1:aa`\r\n\r\n`spack build` builds (\"install\") concretized specs in an environment (concretizing them if not already).  Eg: `spack build myenv:`, `spack build myenv:aa`, `spack build myenv:aa:openblas`.\r\n\r\nThus, `spack install` is equal to `spack add` + `spack concretize` + `spack build`.\r\n\r\n`spack location`, `spack find`, `spack load`, `spack module loads` can now be used to find installed packages in a deterministic manner.  (Thus, they are no longer \"broken\" as a reliable way to obtain hashes of stuff you've built and now want to use).  Eg:\r\n```\r\nspack load -r myenv:aa   # Loads all modules in myenv:aa DAG\r\nspack location -i myenv::openblas   # Finds the (hopefully 1) openblass in myenv\r\nspack module loads -r myenv:   # List all modules needed to load myenv\r\n```\r\n\r\nNote that `spack activate` should not be used with environments.  You need to either use `spack module loads`, or `spack view`.\r\n\r\nThoughts?",
    "user": "citibeth",
    "url": "https://api.github.com/repos/spack/spack/issues/7944",
    "updated_at": "2019-11-05 09:40:19",
    "created_at": "2018-04-30 13:28:18",
    "closed_at": "2019-11-05 09:40:19",
    "state": "closed",
    "title": "Spack Environments 3.0: How they should REALLY work",
    "number": 7944,
    "milestone": null,
    "labels": [
        "environments"
    ],
    "id": 318889781,
    "html_url": "https://github.com/spack/spack/issues/7944",
    "assignees": [],
    "comments": 6
}