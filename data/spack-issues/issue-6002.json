{
    "body": "**Problem Statement**\r\n\r\nIt looks like commit db657d938d38775e4364a6917cc78cb9cdb0b133 on Aug 16 changed the recipe for *intel-mkl* in a way that prevents the use *intel-mkl* on LANL HPC machines.  The current recipe wants to set `MKLROOT` to `self.prefix.compilers_and_libraries.linux.mkl.lib.intel64`, but that is an invalid path for LANL machines.  The correct path for us is `self.prefix.lib.intel64`.\r\n\r\n**Background/Context**\r\n\r\nOn LANL HPC machines, *intel-mkl* is provided as an *external package* via the following entry in `packages.yaml`:\r\n\r\n```yaml\r\npackages:\r\n  intel-mkl:\r\n    version: [11.4.1]\r\n    modules:\r\n      intel-mkl@11.4.1: mkl/11.4.1\r\n```\r\n\r\nThe modulefile `mkl/11.4.1` provides the following information:\r\n\r\n```\r\nconflict(\"mkl\")\r\nwhatis(\"Intel Math Kernel Library 11.4.1 \")\r\nwhatis(\"Default settings for arch=intel64, 4-byte integers \")\r\nsetenv(\"MKLROOT\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017.1.132/linux/mkl\")\r\nprepend_path(\"LD_LIBRARY_PATH\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017/linux/mkl/lib/intel64\")\r\nprepend_path(\"LIBRARY_PATH\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017/linux/mkl/lib/intel64\")\r\nprepend_path(\"INCLUDE\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017.1.132/linux/mkl/include\")\r\nprepend_path(\"FPATH\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017.1.132/linux/mkl/include\")\r\nprepend_path(\"CPATH\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017.1.132/linux/mkl/include\")\r\nprepend_path(\"MANPATH\",\"/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017.1.132/linux/man/common\")\r\n```\r\n\r\nIt looks like `get_path_from_module` (found at `module_cmd.py`) extracts the *intel-mkl* prefix from `LD_LIBRARY_PATH` provided by the module file (i.e.: `/usr/projects/hpcsoft/toss3/common/intel-clusterstudio/2017.1.024/compilers_and_libraries_2017/linux/mkl/`) and `intel-mkl/package.py` appends `compilers_and_libraries.linux.mkl.lib.intel64` to that path.  This is clearly the wrong behavior for LANL systems.  The following patch provides a work around for LANL HPC machines, but breaks the existing design.  \r\n\r\n\r\n```diff\r\ndiff --git a/var/spack/repos/builtin/packages/intel-mkl/package.py b/var/spack/repos/builtin/packages/intel-mkl/package.py\r\nindex 9a3b9b9..185444a 100644\r\n--- a/var/spack/repos/builtin/packages/intel-mkl/package.py\r\n+++ b/var/spack/repos/builtin/packages/intel-mkl/package.py\r\n@@ -98,7 +98,7 @@ class IntelMkl(IntelPackage):\r\n                 omp_threading = ['libiomp5']\r\n \r\n                 if sys.platform != 'darwin':\r\n-                    omp_root = prefix.compilers_and_libraries.linux.lib.intel64\r\n+                    omp_root = prefix.lib.intel64\r\n                 else:\r\n                     omp_root = prefix.lib\r\n                 omp_libs = find_libraries(\r\n@@ -114,7 +114,7 @@ class IntelMkl(IntelPackage):\r\n         # TODO: TBB threading: ['libmkl_tbb_thread', 'libtbb', 'libstdc++']\r\n \r\n         if sys.platform != 'darwin':\r\n-            mkl_root = prefix.compilers_and_libraries.linux.mkl.lib.intel64\r\n+            mkl_root = prefix.lib.intel64\r\n         else:\r\n             mkl_root = prefix.mkl.lib\r\n \r\n@@ -166,7 +166,7 @@ class IntelMkl(IntelPackage):\r\n \r\n         integer = 'ilp64' if '+ilp64' in self.spec else 'lp64'\r\n         mkl_root = self.prefix.mkl.lib if sys.platform == 'darwin' else \\\r\n-            self.prefix.compilers_and_libraries.linux.mkl.lib.intel64\r\n+            self.prefix.lib.intel64\r\n \r\n         shared = True if '+shared' in self.spec else False\r\n \r\n@@ -184,8 +184,8 @@ class IntelMkl(IntelPackage):\r\n             mkl_lib = self.prefix.mkl.lib\r\n             mkl_root = self.prefix.mkl\r\n         else:\r\n-            mkl_lib = self.prefix.compilers_and_libraries.linux.mkl.lib.intel64\r\n-            mkl_root = self.prefix.compilers_and_libraries.linux.mkl\r\n+            mkl_lib = self.prefix.lib.intel64\r\n+            mkl_root = self.prefix\r\n \r\n         spack_env.set('MKLROOT', mkl_root)\r\n         spack_env.append_path('SPACK_COMPILER_EXTRA_RPATHS', mkl_lib)\r\n```\r\n\r\n**Next Steps**\r\n\r\nI'm not sure how to resolve the different ways in which *intel-mkl* is installed.  Thoughts?",
    "user": "KineticTheory",
    "url": "https://api.github.com/repos/spack/spack/issues/6002",
    "updated_at": "2017-11-01 17:39:12",
    "created_at": "2017-10-26 22:36:32",
    "closed_at": "2017-11-01 17:39:12",
    "state": "closed",
    "title": "intel-mkl recipe is broken for LANL HPC machines",
    "number": 6002,
    "milestone": null,
    "labels": [
        "blas-lapack-scalapack"
    ],
    "id": 268933350,
    "html_url": "https://github.com/spack/spack/issues/6002",
    "assignees": [],
    "comments": 18
}