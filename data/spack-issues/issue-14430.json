{
    "body": "Spack and autotools don't play nice when it comes to debug and\r\noptimization flags.\r\n\r\nI remember when I first started writing spack packages, I wanted the\r\nrecipes to respect cflags.  That is, I should be able to write\r\n`cflags='-O1'` or `-O3` on the spack install line, with or without `-g`\r\nand have that correctly passed through to autotools configure.\r\n\r\nThis is actually rather awkward in spack, largely due to how autotools\r\nconfigure treats CFLAGS.  If you omit CFLAGS from the configure line,\r\nautotools chooses a default (normally, `-g -O2`) for you, but if you\r\nspecify CFLAGS, then it uses exactly that.  If you want `-O2`, you\r\nhave to write it yourself.\r\n\r\nNote: autotools is the wild west of build systems.  Any package is\r\nfree to make its own rules.  But here, let's mainly consider the\r\ncommon behavior of passing flags to the configure script via CFLAGS\r\nand selecting `-g -O2` by default.\r\n\r\nLet's consider different ways of passing spack's cflags to configure.\r\n\r\n1. The default `inject_flags`.  With inject_flags, spack adds my\r\ncflags to the compiler wrapper (along with the microarch flags).  The\r\nproblem is that configure sees CFLAGS as unspecified and chooses its\r\nown default.  For example:\r\n\r\n```\r\nspack -d install -v libsigsegv cflags='-O1'\r\n...\r\n[cc] /bin/gcc -march=westmere -mtune=westmere -O1 -I. -I.. -I. -I.\r\n   -DHAVE_CONFIG_H -g -O2 -c handler.c -o handler.o\r\n```\r\n\r\nSo, I can write `cflags='-O0'` or `-O9` and configure resets this to\r\n`-g -O2`.  That's fine for a default, but the goal is to obey what I\r\ntell spack, and this doesn't.\r\n\r\nAnd don't get the idea that, \"We'll just move the flags to the end of\r\nthe line so that the spack flags win.\"  I know packages (libmonitor)\r\nthat need to see CFLAGS and adjust them to make some code compile\r\n(involving asm and code motion).  This idea would break those\r\npackages.\r\n\r\nBtw, long ago, the situation was much worse.  Before `flag_handler`,\r\nspack would pass `CFLAGS=''` to configure and a lot of packages would\r\nget built unoptimized.  In autotools, there is a huge difference\r\nbetween an unspecified CFLAGS and CFLAGS=''.\r\n\r\n2. `build_system_flags`.  This passes CFLAGS to configure.  So, if I\r\nsay `cflags='-O1'`, then I get exactly that.\r\n\r\nThe problem here is that if you specify cflags, any cflags, then you\r\nneed to specify everything.  If you write `cflags='-mavx'`, then\r\nthat's all I get, no `-O2`.  This is awkward and error prone.\r\n\r\nPlus, I've never really liked that spack's cflags are passed down to\r\ndependencies.  I'd prefer a debug/opt option that applies to this\r\npackage only.\r\n\r\nIMO, I think the takeaway is: autotools expects to see CFLAGS, and so\r\nit's better to take the decision out of configure and push it up to\r\nthe spack level.\r\n\r\nNote: this already exists for CMakePackage.  Every cmake package has a\r\n`build_type` variant, so this is cleaner for cmake.\r\n\r\n----------\r\n\r\nI propose that we add variants for `debug_symbols` (boolean) and\r\n`opt_flags` (string) to the AutotoolsPackage class (maybe all\r\npackages), make the decision at the spack level, use this to set\r\nCFLAGS, CXXFLAGS and FFLAGS and pass these to configure.\r\n\r\nIf the user also specifies `cflags`, then add those to the debug and\r\nopt flags.  I'm suggesting that we factor out the debug and opt flags\r\nbecause that's what configure sets on its own.\r\n\r\nActually, you can't impose this on all autotools packages, that would\r\nsurely break some packages.  Make it an easy, 1-knob option for the\r\npackages that can use it.\r\n\r\nBtw, `debug` is a bit ambiguous, does it mean low optimization (-O0)\r\nor debug symbols (-g) or both.  I went with `debug_symbols` to be more\r\nexplicit (plus many packages already have a `debug` variant).\r\n\r\nAlso, I went with `opt_flags` (string) instead of `opt_level`\r\n(integer) to allow for things like `-Os` or `-Ofast`.\r\n\r\nFundamentally, I think it makes sense to decide this at the spack\r\nlevel and then pass that to configure.  Cmake already does this and I\r\nthink the other package classses should make this available.\r\n\r\n@tgamblin \r\n\r\n",
    "user": "mwkrentel",
    "url": "https://api.github.com/repos/spack/spack/issues/14430",
    "updated_at": "2021-03-19 19:34:44",
    "created_at": "2020-01-08 19:20:23",
    "closed_at": "None",
    "state": "open",
    "title": "optimization flags for autotools packages",
    "number": 14430,
    "milestone": null,
    "labels": [
        "feature",
        "discussion"
    ],
    "id": 547053876,
    "html_url": "https://github.com/spack/spack/issues/14430",
    "assignees": [
        "scheibelp"
    ],
    "comments": 6
}