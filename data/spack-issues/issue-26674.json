{
    "body": "### Summary\r\n\r\nAs someone who's contributed to Spack for multiple years, I'm still confused about best practices for setting compiler flags within a Spack package, even after reading the [Compiler Flags](https://spack.readthedocs.io/en/latest/packaging_guide.html#compiler-flags) subsection of the [Packaging Guide](https://spack.readthedocs.io/en/latest/packaging_guide.html); here, I'm ignoring injecting flags like `cflags` into specs in a command line Spack invocation, in environment files, and so on -- I'm limiting the scope of this query to setting flags for, say, a concrete package called `MyPackage` within the `package.py` file defining that package. What is the preferred approach for setting compiler flags inside the source of that package?\r\n\r\nThe Compiler Flags subsection suggests setting flags via a [package `flag_handler` method](https://github.com/spack/spack/blob/89220bc0e1bc8df0130cf5388488c2b161caf554/lib/spack/spack/package.py#L2139); however, other packages set compiler flags via:\r\n* setting/modifying entries of the [`spec.compiler_flags`](https://github.com/spack/spack/blob/0c0831861c57b747d915731ef3ad214346a9dcbe/lib/spack/spack/spec.py#L1078) dictionary (e.g., [`mfem`](https://github.com/spack/spack/blob/b9e72557e8b52b63244500f226afda0efe798df2/var/spack/repos/builtin/packages/mfem/package.py#L450))\r\n* modifying entries of the build environment via [`setup_build_environment`](https://github.com/spack/spack/blob/0c0831861c57b747d915731ef3ad214346a9dcbe/lib/spack/spack/package.py#L2010) (e.g., [`f77-zmq`](https://github.com/spack/spack/blob/8e61f542601083f363c5910a5ed74c8dae44e69d/var/spack/repos/builtin/packages/f77-zmq/package.py#L27))\r\n* passing arguments via build-system-specific methods, e.g.,\r\n   * via [`AutotoolsPackage.configure_args`](https://github.com/spack/spack/blob/0c0831861c57b747d915731ef3ad214346a9dcbe/lib/spack/spack/build_systems/autotools.py#L382)  (example: [`hpl`](https://github.com/spack/spack/blob/bafd84e191d66b5812c1e197bf9d207479bc49e7/var/spack/repos/builtin/packages/hpl/package.py#L121))\r\n   * via [`CMakePackage.cmake_args`](https://github.com/spack/spack/blob/0c0831861c57b747d915731ef3ad214346a9dcbe/lib/spack/spack/build_systems/cmake.py#L340)  (example: [`root`](https://github.com/spack/spack/blob/b9e72557e8b52b63244500f226afda0efe798df2/var/spack/repos/builtin/packages/root/package.py#L552))\r\n   * via `CachedCMakePackage.cmake_args`(inherited from `CMakePackage.cmake_args`) through [`CachedCMakePackage.initconfig`](https://github.com/spack/spack/blob/0c0831861c57b747d915731ef3ad214346a9dcbe/lib/spack/spack/build_systems/cached_cmake.py#L213) (example: [`ascent`](https://github.com/spack/spack/blob/b9e72557e8b52b63244500f226afda0efe798df2/var/spack/repos/builtin/packages/ascent/package.py#L254); the `hostconfig` method in that package is more or less like `CachedCMakePackage.initconfig`)\r\n   * munging a text file passed into `make` (example: [`scotch`](https://github.com/spack/spack/blob/a9e7f3a4e717b6e0385d6a987326b171c6bfc15a/var/spack/repos/builtin/packages/scotch/package.py#L105))\r\n\r\nAre these alternative means of setting compiler flags mostly deprecated in favor of using `flag_handler`? I suspect munging text files is probably unavoidable in some cases -- subclasses of `CachedCMakePackage` need to write CMake cache files regardless, and packages that use a file like `Makefile.inc` or `config.mk` to set compiler flags likely still need to filter or write such files.\r\n\r\n### Rationale\r\n\r\nI think both new and experienced users would benefit from more explicit style suggestions regarding setting compiler flags within package source files. I see the appeal of the `flag_handler` approach because it seems to more clearly delineate concerns among setting compiler flags via compiler wrappers, the build environment, or the build system settings.\r\n\r\nIf implemented sufficiently carefully, the alternative approaches discussed above probably compose correctly when specifying compiler flags at the command line via, e.g. `spack install foo cflags=\"-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls\"` or enforcing those flags via spec constraints, e.g., if `spec.satisfies(\"+asan\")`, add `depends_on('foo cflags=\"-fsanitize=address\"')` to hardcode variant propagation to dependencies. (I've seen this latter pattern in internal LLNL projects.) However, such careful implementation is easy to foul up, which tends to lead to composition errors that do not set flags correctly (which is also something I've seen internally). More uniform style for setting compiler flags, along the lines of the `flag_handler` approach, might reduce the frequency of occurrence of those sorts of composition errors.\r\n\r\nI suspect more explicit advice might also help decrease review burden. Contributors tend to pattern match contributions to existing project code, and the proliferation of different approaches for setting compiler flags can lead to a wide variation in approaches to setting these flags, as discussed above. Expressing a clearly preferred approach along with unambiguous deprecation of other approaches would decrease this variation, which would probably make it easier to write packages that compose compiler flags correctly. Expressing a clearly preferred approach would also be more Pythonic, a la [PEP 20](https://www.python.org/dev/peps/pep-0020/#:~:text=In%20the%20face%20of%20ambiguity,Now%20is%20better%20than%20never.): \"There should be one -- and preferably only one -- obvious way to do it.\"\r\n\r\n### Description\r\n\r\nPerhaps na\u00efvely, it might suffice within the Compiler Flags subsection of the Packaging Guide to say something like: \"We recommend using `flag_handler` for new packages and package updates instead of (list popular existing alternative approaches), except when a package's build system requires hacking a text file. In those cases, we recommend (list advice).\"\r\n\r\n### Additional information\r\n\r\nThe motivation for filing this issue was to formulate an approach for injecting Address Sanitizer flags into internal development versions of `mfem` and `hypre` packages as part of the Serac project, which is used by an internal FEM project at LLNL. We've run into some memory bugs at scale, and injecting compiler flags into dependent specs would be a really clean way of implementing a `+asan` variant for the Spack package that would configure our internal FEM project. However, this approach has tended not to work for debugging flags, which has led to a proliferation of `+debug` variants in Spack packages for our dependencies, some of which have been contributed to upstream Spack. For now, I'll probably add `+asan` variants to internal versions of Spack packages for our dependencies, but it would be nicer and more elegant if we could more reliably inject flags via dependent specs such as `depends_on('hypre cxxflags=\"-fsanitize=address\"')` instead; previous experience has suggested this latter approach is unlikely to work in general practice, though it may work with certain packages right now. More widespread adoption of the `flag_handler` approach might change my perception on the reliability of injecting flags via dependent specs, and if such an approach were more reliable, it might decrease the tendency towards adding variants like `+asan` or `+debug` that are fairly generic for packages that don't provide their own bespoke hooks for that functionality.\r\n\r\nI have searched the issues of this repo and couldn't find a particularly good duplicate, but if anyone knows of one, I'd be interested in linking to it. I haven't run `spack --version` because I don't think it applies well in this case, but most of the commentary in this issue applies to the development version of Spack as of commit [`0c0831861c57b747d915731ef3ad214346a9dcbe`](https://github.com/spack/spack/commit/0c0831861c57b747d915731ef3ad214346a9dcbe).\r\n\r\n### General information\r\n\r\n- [X] I have run `spack --version` and reported the version of Spack\r\n- [X] I have searched the issues of this repo and believe this is not a duplicate",
    "user": "goxberry",
    "url": "https://api.github.com/repos/spack/spack/issues/26674",
    "updated_at": "2021-10-12 17:22:36",
    "created_at": "2021-10-12 07:26:44",
    "closed_at": "None",
    "state": "open",
    "title": "Packaging Guide Documentation: what are best practices for setting compiler flags within a package?",
    "number": 26674,
    "milestone": null,
    "labels": [
        "feature"
    ],
    "id": 1023462245,
    "html_url": "https://github.com/spack/spack/issues/26674",
    "assignees": [],
    "comments": 1
}