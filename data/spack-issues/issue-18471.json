{
    "body": "### Rationale\r\n\r\nThere are some packages like `jdk` where the package can be automatically installed for Linux x86_64 but not macOS or aarch64. There are also some packages like `cuda` which don't define a `version(...)` at all on macOS but do on Linux x86_64, aarch64, and ppc64le.\r\n\r\nThe former example could be reformatted to look like the latter example. Or both examples could be modified by adding a `when=` kwarg to the `version()` directive. @alalazo and I have discussed this but apparently it's difficult to implement the latter.\r\n\r\n### Proposal\r\n\r\nAnyway, regardless of which solution we end up using, the error message for packages which don't define any version on the current OS is very cryptic. On macOS:\r\n```console\r\n$ spack install cuda\r\n==> Error: There are no valid versions for cuda that match ':'\r\n```\r\nThis has been documented in #4119 and #17512. If you also want to close these issues, we could detect when no valid versions are found for a package on the current OS and make that more clear using similar logic to what you added in this PR.\r\n\r\n_Originally posted by @adamjstewart in https://github.com/spack/spack/pull/18242#issuecomment-682022236_",
    "user": "tldahlgren",
    "url": "https://api.github.com/repos/spack/spack/issues/18471",
    "updated_at": "2020-09-09 08:33:53",
    "created_at": "2020-09-02 22:06:38",
    "closed_at": "None",
    "state": "open",
    "title": "Clarify NoValidVersionError message",
    "number": 18471,
    "milestone": null,
    "labels": [
        "error-messages",
        "impact-low"
    ],
    "id": 691462574,
    "html_url": "https://github.com/spack/spack/issues/18471",
    "assignees": [],
    "comments": 1
}