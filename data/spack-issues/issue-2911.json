{
    "body": "I've never used modules before, but ANL's LCRC is looking to make the switch to Lmod for our next cluster. I decided to try out our modules tutorial, but ran into a problem. I created a `~/.spack/modules.yaml` containing:\r\n```yaml\r\nmodules:\r\n  enable::\r\n    - lmod\r\n```\r\nand ran:\r\n```\r\n$ spack module refresh --module-type lmod\r\n```\r\nbut it crashed with:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/soft/spack-0.10.0/bin/spack\", line 212, in <module>\r\n    main(sys.argv)\r\n  File \"/soft/spack-0.10.0/bin/spack\", line 208, in main\r\n    _main(args, unknown)\r\n  File \"/soft/spack-0.10.0/bin/spack\", line 174, in _main\r\n    return_val = command(parser, args)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/cmd/module.py\", line 259, in module\r\n    callbacks[args.subparser_name](module_type, specs, args)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/cmd/module.py\", line 243, in refresh\r\n    x.write(overwrite=True)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/modules.py\", line 380, in write\r\n    set_module_variables_for_package(package, mod)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/build_environment.py\", line 380, in set_module_variables_for_package\r\n    m.std_cmake_args = spack.CMakePackage._std_args(pkg)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/build_systems/cmake.py\", line 95, in _std_args\r\n    rpaths = ':'.join(spack.build_environment.get_rpaths(pkg))\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/build_environment.py\", line 424, in get_rpaths\r\n    rpaths.extend(d.prefix.lib for d in deps\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/build_environment.py\", line 425, in <genexpr>\r\n    if os.path.isdir(d.prefix.lib))\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/spec.py\", line 1156, in prefix\r\n    return Prefix(spack.store.layout.path_for_spec(self))\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/directory_layout.py\", line 124, in path_for_spec\r\n    _check_concrete(spec)\r\n  File \"/blues/gpfs/home/software/spack-0.10.0/lib/spack/spack/directory_layout.py\", line 42, in _check_concrete\r\n    raise ValueError('Specs passed to a DirectoryLayout must be concrete!')\r\nValueError: Specs passed to a DirectoryLayout must be concrete!\r\n```\r\nThis seems to be a common error message. I'm seeing it in #206, #217, #238, #244, and #1960. From what I gather from reading those other issues, it sounds like this is caused by changing hashes and packages/variants being added/removed? Unfortunately, this makes Spack + Modules a pipe dream, as you would have to completely reinstall Spack or uninstall all previous versions the first time any conflict occurs.",
    "user": "adamjstewart",
    "url": "https://api.github.com/repos/spack/spack/issues/2911",
    "updated_at": "2017-11-22 14:19:07",
    "created_at": "2017-01-23 20:48:54",
    "closed_at": "2017-11-22 14:19:07",
    "state": "closed",
    "title": "ValueError: Specs passed to a DirectoryLayout must be concrete!",
    "number": 2911,
    "milestone": null,
    "labels": [
        "bug",
        "modules",
        "pkg-database"
    ],
    "id": 202646530,
    "html_url": "https://github.com/spack/spack/issues/2911",
    "assignees": [
        "alalazo"
    ],
    "comments": 29
}