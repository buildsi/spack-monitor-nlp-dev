{
    "body": "### Steps to reproduce the issue\r\n\r\nOn the Cray system Spock we are using cray-mpich as an external mpi provider, set up in packages.yaml like this:\r\n\r\n```\r\npackages:\r\n    mpich:\r\n      buildable: false\r\n      externals:\r\n      - spec: cray-mpich@8.1.7 # mpich@3.4.2\r\n        prefix: /opt/cray/pe/mpich/8.1.7/ofi/crayclang/10.0\r\n        modules:\r\n        - cray-mpich/8.1.7\r\n        - craype-network-ofi\r\n```\r\n\r\nAnd the top of our environment like this:\r\n```\r\nspack:\r\n  view: false\r\n  concretization: separately\r\n  packages:\r\n    all:\r\n      compiler:\r\n      - gcc@10.3.0\r\n      providers:\r\n        blas:\r\n        - openblas\r\n        mpi:\r\n        - cray-mpich\r\n      target:\r\n      - x86_64\r\n      variants: +mpi\r\n```\r\n\r\n\r\nLibnrm built and configured under this configuration previously but with the new concretizer we instead get a lot of concretizer output concluding with:\r\n\r\n```\r\n  dependency_type(1132,\"build\")\r\n  external_only(\"mpich\")\r\n  root(\"libnrm\")\r\n  variant_single_value(\"boost\",\"mpi\")\r\n  variant_single_value(\"boost\",\"numpy\")\r\n  variant_single_value(\"cairo\",\"svg\")\r\n  variant_single_value(\"cmake\",\"doc\")\r\n  variant_single_value(\"cmake\",\"ownlibs\")\r\n  variant_single_value(\"cmake\",\"qt\")\r\n  variant_single_value(\"curl\",\"libssh\")\r\n  variant_single_value(\"curl\",\"libssh2\")\r\n  variant_single_value(\"harfbuzz\",\"graphite2\")\r\n  variant_single_value(\"hdf5\",\"java\")\r\n  variant_single_value(\"hdf5\",\"mpi\")\r\n  variant_single_value(\"hdf5\",\"szip\")\r\n  variant_single_value(\"hwloc\",\"cairo\")\r\n  variant_single_value(\"hwloc\",\"gl\")\r\n  variant_single_value(\"hwloc\",\"netloc\")\r\n  variant_single_value(\"hwloc\",\"opencl\")\r\n  variant_single_value(\"hwloc\",\"rocm\")\r\n  variant_single_value(\"icedtea\",\"X\")\r\n  variant_single_value(\"knem\",\"hwloc\")\r\n  variant_single_value(\"libgit2\",\"curl\")\r\n  variant_single_value(\"libgit2\",\"ssh\")\r\n  variant_single_value(\"llvm-amdgpu\",\"openmp\")\r\n  variant_single_value(\"llvm-amdgpu\",\"rocm-device-libs\")\r\n  variant_single_value(\"mesa\",\"llvm\")\r\n  variant_single_value(\"mesa18\",\"llvm\")\r\n  variant_single_value(\"mvapich2\",\"fabrics\")\r\n  variant_single_value(\"mvapich2-gdr\",\"pmi_version\")\r\n  variant_single_value(\"mvapich2-gdr\",\"rocm\")\r\n  variant_single_value(\"mvapich2x\",\"pmi_version\")\r\n  variant_single_value(\"netlib-lapack\",\"external-blas\")\r\n  variant_single_value(\"openmpi\",\"cuda\")\r\n  variant_single_value(\"openmpi\",\"internal-hwloc\")\r\n  variant_single_value(\"openmpi\",\"java\")\r\n  variant_single_value(\"openmpi\",\"memchecker\")\r\n  variant_single_value(\"openmpi\",\"singularity\")\r\n  variant_single_value(\"openmpi\",\"thread_multiple\")\r\n  variant_single_value(\"pandoc\",\"texlive\")\r\n  variant_single_value(\"pango\",\"X\")\r\n  variant_single_value(\"pmix\",\"docs\")\r\n  variant_single_value(\"pmix\",\"restful\")\r\n  variant_single_value(\"poppler\",\"boost\")\r\n  variant_single_value(\"poppler\",\"cms\")\r\n  variant_single_value(\"poppler\",\"glib\")\r\n  variant_single_value(\"poppler\",\"gobject\")\r\n  variant_single_value(\"poppler\",\"jpeg\")\r\n  variant_single_value(\"poppler\",\"libcurl\")\r\n  variant_single_value(\"poppler\",\"openjpeg\")\r\n  variant_single_value(\"poppler\",\"qt\")\r\n  variant_single_value(\"poppler\",\"tiff\")\r\n  variant_single_value(\"py-numpy\",\"blas\")\r\n  variant_single_value(\"py-numpy\",\"lapack\")\r\n  variant_single_value(\"py-urllib3\",\"secure\")\r\n  variant_single_value(\"qt\",\"doc\")\r\n  variant_single_value(\"qt\",\"gtk\")\r\n  variant_single_value(\"qt\",\"opengl\")\r\n  variant_single_value(\"slurm\",\"gtk\")\r\n  variant_single_value(\"slurm\",\"hdf5\")\r\n  variant_single_value(\"slurm\",\"hwloc\")\r\n  variant_single_value(\"slurm\",\"mariadb\")\r\n  variant_single_value(\"slurm\",\"pmix\")\r\n  variant_single_value(\"slurm\",\"restd\")\r\n  variant_single_value(\"ucx\",\"java\")\r\n  variant_single_value(\"ucx\",\"knem\")\r\n  variant_single_value(\"valgrind\",\"boost\")\r\n  variant_single_value(\"valgrind\",\"mpi\")\r\n==> Error: libnrm@0.1.0 does not satisfy unknown\r\n```\r\nLibnrm specifies mpich as a specific dependency instead of mpi but builds successfully with cray-mpich when it concretizes under the old system. \r\n\r\nAssuming the concretizer is trying to report this specific issue, the error output is not very useful.\r\n\r\n### Information on your system\r\n\r\n* **Spack:** 0.16.2-4271-c4e26ac7c8\r\n* **Python:** 3.6.13\r\n* **Platform:** cray-sles15-zen2\r\n* **Concretizer:** clingo\r\n\r\n\r\n### Additional information\r\n\r\n@freuk @alalazo \r\n\r\n### General information\r\n\r\n- [X] I have run `spack debug report` and reported the version of Spack/Python/Platform\r\n- [X] I have run `spack maintainers <name-of-the-package>` and **@mentioned** any maintainers\r\n- [X] I have uploaded the build log and environment files\r\n- [X] I have searched the issues of this repo and believe this is not a duplicate",
    "user": "wspear",
    "url": "https://api.github.com/repos/spack/spack/issues/26007",
    "updated_at": "2021-10-04 12:52:43",
    "created_at": "2021-09-17 00:00:29",
    "closed_at": "None",
    "state": "open",
    "title": "Installation issue: libnrm won't concretize with clingo and cray-mpich",
    "number": 26007,
    "milestone": null,
    "labels": [
        "cray",
        "build-error"
    ],
    "id": 998778602,
    "html_url": "https://github.com/spack/spack/issues/26007",
    "assignees": [
        "alalazo"
    ],
    "comments": 0
}