{
    "body": "# Singularity Command\r\n\r\nThis is an early effort at a Singularity command, meaning that we create a\r\nSingularity recipe (and can then optionall build a container) using it. It was fairly easy to put together with great example from https://github.com/spack/spack/pull/7204. This implementation is much simpler - we don't start any mirrors / volumes, we just scoot out a recipe and optionally build.\r\n\r\n## The Command Group\r\n\r\nHere is what the command group looks like. The user has the option to select\r\n\"recipe\" or \"build\" subcommands. This extra grouping isn't essential, but provided\r\n(as a design decision) so the final typed command is intuitive (reads like\r\na sentence).\r\n\r\n```bash\r\n$ bin/spack singularity -h\r\nusage: spack singularity [-h] build|recipe ...\r\n\r\nuse singularity to build containers with spack packages\r\n\r\npositional arguments:\r\n  build|recipe\r\n    recipe      generate a recipe\r\n    build       generate a recipe and build it (required sudo)\r\n\r\noptional arguments:\r\n  -h, --help    show this help message and exit\r\n\r\n```\r\n\r\nFor example, it's intuitive to ask for a recipe. \r\nLet's give a go to generate a recipe with a debian base, and install curl:\r\n\r\n```bash\r\n$ spack singularity recipe --from ubuntu:16.04 curl\r\n==> Installing packages curl\r\n==> Attempting to infer distro from base image...\r\n==> Found distro ubuntu\r\n==> Working directory created in /tmp/tmpfvp7wlfq\r\n==> Writing recipe to /tmp/tmpfvp7wlfq/Singularity\r\n==> sudo singularity build container.sif /tmp/tmpfvp7wlfq/Singularity\r\n```\r\n\r\nHere is the recipe generated from a template:\r\n\r\n```\r\nBootstrap: docker\r\nFrom: ubuntu:18.04\r\n\r\n%environment\r\nSPACK_ROOT=/home/spack\r\nFORCE_UNSAFE_CONFIGURE=1\r\nPATH=\"${PATH}:${SPACK_ROOT}/bin\"\r\nexport SPACK_ROOT FORCE_UNSAFE_CONFIGURE PATH\r\n\r\n%help\r\nThis is a spack container with packages curl\r\n\r\n%post\r\nSPACK_ROOT=/home/spack\r\nFORCE_UNSAFE_CONFIGURE=1\r\nPATH=\"${PATH}:${SPACK_ROOT}/bin\"\r\nexport SPACK_ROOT FORCE_UNSAFE_CONFIGURE PATH\r\n\r\n# Install basic system dependencies\r\napt-get update && \\\r\n    apt-get install -y git gcc g++ gfortran make bzip2 && \\\r\n    apt-get install -y patch file curl python gnupg2 xz-utils && \\\r\n    rm -rf /var/lib/apt/lists/*\r\n    \r\n\r\n# Install spack + set the mirror\r\nmkdir -p $SPACK_ROOT\r\ncurl -s -L https://api.github.com/repos/spack/spack/tarball/develop \\\r\n    | tar xzC $SPACK_ROOT --strip 1\r\n\r\n/home/spack/bin/spack install curl\r\n\r\n%runscript\r\nexec /home/spack/bin/spack \"$@\"\r\n```\r\n\r\nThe final line is the command (instruction) to the user to build the container.\r\nLet's do that.\r\n\r\n```bash\r\n$ sudo singularity build container.sif /tmp/tmpfvp7wlfq/Singularity\r\n```\r\n\r\nThen my container runs, exposing the spack entrypoint (and I can find curl).\r\n\r\n```bash\r\n$ singularity run container.sif \r\nusage: spack [-hkV] [--color {always,never,auto}] COMMAND ...\r\n\r\nA flexible package manager that supports multiple versions,\r\nconfigurations, platforms, and compilers.\r\n\r\nThese are common spack commands:\r\n\r\nquery packages:\r\n  list                  list and search available packages\r\n  info                  get detailed information on a particular package\r\n  find                  list and search installed packages\r\n\r\nbuild packages:\r\n  install               build and install packages\r\n  uninstall             remove installed packages\r\n  spec                  show what would be installed, given a spec\r\n\r\nenvironments:\r\n  env                   manage virtual environments\r\n  view                  project packages to a compact naming scheme on the filesystem.\r\n\r\nmodules:\r\n  load                  add package to environment using `module load`\r\n  module                manipulate module files\r\n  unload                remove package from environment using `module unload`\r\n\r\ncreate packages:\r\n  create                create a new package file\r\n  edit                  open package files in $EDITOR\r\n\r\nsystem:\r\n  arch                  print architecture information about this machine\r\n  compilers             list available compilers\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -k, --insecure        do not check ssl certificates when downloading\r\n  -V, --version         show version number and exit\r\n  --color {always,never,auto}\r\n                        when to colorize output (default: auto)\r\n\r\nmore help:\r\n  spack help --all       list all commands and options\r\n  spack help <command>   help on a specific command\r\n  spack help --spec      help on the spec syntax\r\n  spack docs             open http://spack.rtfd.io/ in a browser\r\nvanessa@vanessa-ThinkPad-T460s:~/Documents/Dropbox/Code/Python/spack$ singularity run container.sif find curl\r\n==> 1 installed package\r\n-- linux-ubuntu18.04-x86_64 / gcc@7.4.0 -------------------------\r\ncurl@7.63.0\r\n```\r\n\r\nThat's basically it - it's the simplest implementation I could think of, meaning\r\nI don't bring in any special libraries (Singularity Python, HPC Container Maker, etc.)\r\nThe user can switch recipe --> build (and use sudo) to do the same process, but\r\nbuilding the container at the end.\r\n\r\n```\r\n$ sudo bin/spack singularity build --from ubuntu:16.04 curl\r\n```\r\n\r\nFor the interested reader, here is an asciinema that shows the recipe generation\r\nand then build (to confirm that the example at least works!)\r\n\r\n[asciinema](https://asciinema.org/a/244183?speed=3)\r\n\r\n\r\n## Discussion\r\n\r\n### Should containers be kept with spack?\r\n\r\nGiven that we have a build command, is there some avenue for containers to be \"a thing\"\r\nthat spack installs? For example, instead of having `opt/spack/linux-ubuntu16.04-x86_64/`\r\nWe might dump a container into `opt/spack/containers/singularity` and then name based on\r\nthe packages installed (the specs.)\r\n\r\n\r\n### Entrypoint examples?\r\nHaving spack as the entrypoint makes sense for discovery of what is installed. But \r\nwhat is the way I would specify running curl (or any installed package) via the spack\r\nentrypoint? We should have these examples provided (by default) in the container\r\nhelp.\r\n\r\n### Alpine / busybox base\r\n\r\n<s>We need to have this as an option - I'll just start working on it (need to test\r\nthe dependencies for spack) and then give it a go (not sure if spack supports these\r\nbases, but I'll find out!)</s>\r\n\r\nalpine is added. I'm not sure we need busybox, but others can comment.\r\n\r\n### Custom environment / labels / files\r\n\r\nWhat labels would be useful to add (by default?) Is it a valid use case to want\r\nto add some other set of environment variables, labels, files, or commands?\r\n\r\n### Reproducibility\r\n\r\nThe \"reproducibility raccoon\" in me wants to (given that the user builds the container\r\nfor storage with spack) also keep the recipe, especially if we open up avenues to\r\nadd further customization other than installing packages.\r\n\r\n### Customize entrypoint?\r\n\r\nAny potential use case of a user wanting the entrypoint to not be spack?\r\nI would err on not providing this because we lose information / metadata about\r\nthe container that spack can provide. But it could be wanted.\r\n\r\n### Don't generate recipe?\r\nArguably, if we don't need to build, the recipe can be printed to screen.\r\nI am assuming that the average user generating a recipe wants to keep it,\r\nso I wrote to file. However it would be one extra step to pipe into a recipe file,\r\nin case that it's wanted. I would say this is a reasonable start unless someone\r\nhas huge issue.\r\n\r\n### Check if Singularity not installed\r\n\r\nDoes spack do this when I create the executable (or do I need to?)\r\n\r\nSigned-off-by: Vanessa Sochat <vsochat@stanford.edu>",
    "user": "vsoch",
    "url": "https://api.github.com/repos/spack/spack/issues/11367",
    "updated_at": "2021-07-24 05:18:20",
    "created_at": "2019-05-03 18:10:58",
    "closed_at": "2021-07-24 05:18:20",
    "state": "closed",
    "title": "Adding singularity command group with recipe|build",
    "number": 11367,
    "milestone": null,
    "labels": [
        "revisit",
        "commands",
        "containers"
    ],
    "id": 440160479,
    "html_url": "https://github.com/spack/spack/pull/11367",
    "assignees": [
        "alalazo"
    ],
    "comments": 49
}