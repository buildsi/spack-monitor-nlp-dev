{
    "body": "Spack seems to be inconsistently handling shorted versions.\r\n\r\n### `depends_on`\r\n\r\n:heavy_check_mark: **Edited by @haampie 2021-09-22**: the issue here is no longer relevant, because `depends_on('python@2.7')` means the python version is in the closed-open range [2.7, 2.8).\r\n\r\nWhen used in a `depends_on` statement, if I say:\r\n```python\r\ndepends_on('python@2.7')\r\n```\r\nSpack will install _exactly_ Python 2.7, which will crash because 2.7 doesn't exist. I would instead expect it to install the latest 2.7.X. This is a long-standing bug documented in #921 and #1035.\r\n\r\nAs of now, the workaround has been to explicitly turn this into a version range:\r\n```python\r\ndepends_on('python@2.7.0:2.7.999')\r\n```\r\nThis works, but is unnecessarily wordy.\r\n\r\n### `when=`\r\n\r\n:heavy_check_mark: **Edited by @haampie 2021-09-22**: This issue is fixed, since we can write `when='@0.2:0.2.0'`, and the meaning is consistent with `depends_on`.\r\n\r\nWhen used in a `when=` argument, if I say:\r\n```python\r\ndepends_on('r@3.4.0:3.4.9', when='@0.2')\r\n```\r\nthis will apply to both versions 0.2 and 0.2.2, as documented in #8950. Similarly, if I say:\r\n```python\r\npatch('foo.patch', when='@3.2')\r\n```\r\nthis patch will be applied to both versions 3.2 and 3.2.1, as documented in #8320 and #8432.\r\n\r\nAs of now, there is no workaround for this problem. This may be fixed by #8320.\r\n\r\n### Compiler versions\r\n\r\nThis one is the worst of all. Let's say I have a GCC 7.2.0 compiler in my `compilers.yaml`. There are many other GCC compilers, but this is the only GCC 7 compiler I have. If I say:\r\n```console\r\n$ spack install zlib %gcc@7\r\n```\r\nSpack will correctly deduce that I want it to use my GCC 7.2.0 compiler, but it will resolve the compiler as `%gcc@7` in my spec, and install to the `darwin-highsierra-x86_64/gcc-7` directory. The installation succeeds, but if I rerun:\r\n```console\r\n$ spack install foo %gcc@7.2.0 ^zlib\r\n```\r\nSpack needs to reinstall `zlib` with the new GCC 7.2.0 compiler. I believe this bug is undocumented. In fact, I think it used to work properly. I used it all the time when I had multiple GCC compilers installed and I wanted to specify one.\r\n\r\nThe workaround is to use a version range, like `%gcc@7:`.\r\n\r\n### Proposal\r\n\r\nAll of these situations should be handled identically. Otherwise, it's confusing what behavior to expect. I propose the following behavior.\r\n\r\nIf a `package.py`/`compilers.yaml` contains both 3.2 and 3.2.1, 3.2 should refer to _exactly_ 3.2 only.\r\n\r\nIf a `package.py`/`compilers.yaml` only contains 3.2.1, 3.2 should refer to any 3.2.X version.\r\n\r\n@tgamblin @baberlevi @PDoakORNL @cyrush @davydden @goxberry @eschnett ",
    "user": "adamjstewart",
    "url": "https://api.github.com/repos/spack/spack/issues/8957",
    "updated_at": "2021-09-22 14:38:49",
    "created_at": "2018-08-11 14:14:17",
    "closed_at": "None",
    "state": "open",
    "title": "Inconsistent handling of shortened versions",
    "number": 8957,
    "milestone": null,
    "labels": [
        "concretization",
        "specs",
        "discussion",
        "versions"
    ],
    "id": 349737005,
    "html_url": "https://github.com/spack/spack/issues/8957",
    "assignees": [],
    "comments": 25
}