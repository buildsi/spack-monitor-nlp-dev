{
    "body": "@tgamblin  [wrote](https://github.com/spack/spack/pull/8994#discussion_r210522026)\r\n\r\n> Adding results of libs and headers to the build environment wouldn\u2019t be so hard... that\u2019s something we should do. They just need to be added to the env vars for the wrappers in build_environment.py.\r\n\r\nnow the problem is what to do with packages that have more than one set of libs like `intel-mkl` with `blas_libs`, `lapack_libs` and `scalapack_libs`? That's actually the primary reason to get away from hard-coding `prefix.lib` in order to avoid surpises in `rpaths` for Intel packages.\r\n\r\nThe problem comes from the fact that at this stage Spack can't know which libs will actually be used inside a given package. Maybe a package needs just `blas` libs or the full set of `blas+lapack+scalapack`. So perhaps a simple solution is for complicated packages always define the total `libs` property. ",
    "user": "davydden",
    "url": "https://api.github.com/repos/spack/spack/issues/9032",
    "updated_at": "2019-05-02 06:55:09",
    "created_at": "2018-08-21 13:10:52",
    "closed_at": "2019-05-02 06:55:09",
    "state": "closed",
    "title": "use Package.libs in RPATH with a fallback to prefix.lib/lib64",
    "number": 9032,
    "milestone": null,
    "labels": [
        "rpath"
    ],
    "id": 352531467,
    "html_url": "https://github.com/spack/spack/pull/9032",
    "assignees": [],
    "comments": 17
}