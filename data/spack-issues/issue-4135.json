{
    "body": "This may be the root of some weird behaviors seen around, given that currently this pattern is used in more than 40 packages. Short story: ~never use this inside packages:~  this line behaves wrongly in packages:\r\n```python\r\nspec.satisfies('^foo')  # or similar checks\r\n```\r\nwhile this behaves correctly:\r\n```python\r\n'^foo' in spec\r\n```\r\n\r\nThe point is that the first call is meant to be used inside the concretizer and has a weaker semantic on enforcing the constraint. The second call has a stronger semantic, and is equivalent to calling:\r\n```\r\nfor s in self.traverse():\r\n    if s.satisfies('^foo', strict=True):\r\n        return True\r\n```\r\nwhere:\r\n1. we recurse on the spec\r\n2. we activate the `strict=True` parameter which enforces the strong semantic\r\n\r\nIn other words (@tgamblin :tm: ) the first call means that `spec` **could satisfy** `^foo` eventually. The second that `spec` can satisfy `^foo` right now.\r\n\r\n@scheibelp @becker33 @tgamblin Can you confirm that this could be a potential issue for packages?\r\n",
    "user": "alalazo",
    "url": "https://api.github.com/repos/spack/spack/issues/4135",
    "updated_at": "2020-03-11 18:33:46",
    "created_at": "2017-05-05 13:52:38",
    "closed_at": "None",
    "state": "open",
    "title": "spec.satisfies needs to be refactored (behaves wrongly inside packages)",
    "number": 4135,
    "milestone": null,
    "labels": [
        "bug",
        "discussion"
    ],
    "id": 226580154,
    "html_url": "https://github.com/spack/spack/issues/4135",
    "assignees": [],
    "comments": 17
}