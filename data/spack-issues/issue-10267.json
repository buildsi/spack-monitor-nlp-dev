{
    "body": "I want to use spack environments, based on a spack.yaml file in order to build a fully standalone environment, including the compiler deployement.\r\n\r\nAt the moment, I am using a simple spack.yaml file containing:\r\n\r\n```\r\nspack:\r\n  specs:\r\n  - intel%gcc@4.8.5\r\n  - zlib%intel\r\n```\r\n\r\nWhile using `` spack install`` with this spack.yaml file, there is no issue while installing the intel compiler, but once it's installed, the zlib installation gives the following error:\r\n```\r\n==> Concretizing zlib%intel\r\n==> Error: No compilers with spec intel found\r\n```\r\nwhich makes sense as the intel compiler is not defined as a compiler, but I still would like to use it without having to explicitly define the paths where it's installed.\r\n\r\nThat's an issue as it does not fit my requirement which is to deploy a full environment in a single spack environment, using the spack install command only once.\r\n\r\n### Steps to reproduce the issue\r\nIn a new directory, define your spack.yaml as follows:\r\n```\r\nspack:\r\n  # add package specs to the `specs` list\r\n  specs:\r\n  - intel%gcc@4.8.5\r\n  - zlib%intel\r\n```\r\nrun\r\n```\r\nspack install\r\n```\r\n\r\n### Error Message\r\n`==> Concretizing zlib%intel`\r\n\r\n`==> Error: No compilers with spec intel found`\r\n\r\n### Information on your system\r\nCluster based on Linux (RedHat 7.5)\r\n\r\n### Solution proposed\r\nIt's not a PR but I still would like to propose a first solution for this issue.\r\n\r\nAdding a ``compiler:`` section in spack.yaml fixes the issue:\r\n\r\n```\r\n  - compiler:\r\n      environment: {}\r\n      extra_rpaths: []\r\n      flags: {}\r\n      modules: []\r\n      operating_system: rhel7\r\n      paths:\r\n        cc: <PATH_TO_SPACK_INSTALL>/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/icc\r\n        cxx: <PATH_TO_SPACK_INSTALL>/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/icpc\r\n        f77: <PATH_TO_SPACK_INSTALL>/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/ifort\r\n        fc: <PATH_TO_SPACK_INSTALL>/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/ifort\r\n      spec: intel@19.0.1.144\r\n      target: x86_64\r\n```\r\n\r\nAs I wanted to be as generic as possible (to enable my colleagues to re-use my environment), I wanted to define <PATH_TO_SPACK_INSTALL> as an environment variable defined in my project's environment, let's say:\r\n``$SPACK_INSTALL_TREE``\r\n\r\nHowever, cc, cxx, fc and f77 attributes do not evaluate env variables. So I decided to apply the following patch to: \r\n``spack/lib/spack/spack/build_environment.py``\r\n\r\n```\r\n    if compiler.cc:\r\n-        env.set('SPACK_CC', compiler.cc)\r\n+        env.set('SPACK_CC', os.path.expandvars(compiler.cc))\r\n        env.set('CC', os.path.join(link_dir, compiler.link_paths['cc']))\r\n    if compiler.cxx:\r\n-        env.set('SPACK_CXX', compiler.cxx)\r\n+        env.set('SPACK_CXX', os.path.expandvars(compiler.cxx))\r\n        env.set('CXX', os.path.join(link_dir, compiler.link_paths['cxx']))\r\n    if compiler.f77:\r\n-        env.set('SPACK_F77', compiler.f77)\r\n+        env.set('SPACK_F77', os.path.expandvars(compiler.f77))\r\n        env.set('F77', os.path.join(link_dir, compiler.link_paths['f77']))\r\n    if compiler.fc:\r\n-        env.set('SPACK_FC',  compiler.fc)\r\n+        env.set('SPACK_FC',  os.path.expandvars(compiler.fc))\r\n        env.set('FC', os.path.join(link_dir, compiler.link_paths['fc']))\r\n```\r\nEnabling env variables expansion in compiler paths enables multiple users to have a fully standalone version of the environment with the following spack.yaml:\r\n```\r\nspack:\r\n  # add package specs to the `specs` list\r\n  specs:\r\n  - intel%gcc@4.8.5\r\n  - zlib%intel\r\n\r\n  config:\r\n    install_tree: $SPACK_INSTALL_TREE\r\n\r\n  compilers:\r\n  - compiler:\r\n      environment: {}\r\n      extra_rpaths: []\r\n      flags: {}\r\n      modules: []\r\n      operating_system: rhel7\r\n      paths:\r\n        cc: $SPACK_INSTALL_TREE/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/icc\r\n        cxx: $SPACK_INSTALL_TREE/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/icpc\r\n        f77: $SPACK_INSTALL_TREE/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/ifort\r\n        fc: $SPACK_INSTALL_TREE/gcc-4.8.5/intel-19.0.1-vu2n/compilers_and_libraries_2019.1.144/linux/bin/intel64/ifort\r\n      spec: intel@19.0.1.144\r\n      target: x86_64\r\n```\r\n\r\nThis can be simply used by setting a SPACK_INSTALL_TREE environment variable in a project environment.\r\n\r\nAn other solution could be that you enable cc,fc,.. to be relative, based on config.install_tree.\r\nOr, we could also imagine a variable, based also on config.install_tree, which could be used in config files (such as $spack).",
    "user": "HGab",
    "url": "https://api.github.com/repos/spack/spack/issues/10267",
    "updated_at": "2019-11-21 22:17:58",
    "created_at": "2019-01-07 14:35:34",
    "closed_at": "2019-11-21 22:17:57",
    "state": "closed",
    "title": "Using spack.yaml for building a fully standalone environment (including compiler)",
    "number": 10267,
    "milestone": null,
    "labels": [
        "bug"
    ],
    "id": 396510758,
    "html_url": "https://github.com/spack/spack/issues/10267",
    "assignees": [],
    "comments": 1
}