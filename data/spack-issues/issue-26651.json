{
    "body": "Many Spack tests use `SpackCommand('install')()` to install packages.\r\n\r\nI'm not a big fan of how `SpackCommand` is sprinkled around in all the tests, because it's arguably too high-level for unit-tests. It'd be much better if we could immediately invoke `InstallCommand(...)` skipping argument parsing. But now that we use it everywhere, it'd be good if the actual exception that comes out of it after a failed install is informative.\r\n\r\nCurrently the output is:\r\n\r\n```\r\nE           spack.installer.InstallError: Installation request failed.  Refer to reported errors for failing package(s).\r\n```\r\n\r\nwithout the reported errors being anywhere in stdout/stderr because they are returned by `SpackCommand`, and that's the command throwing the above error.\r\n\r\nWith this PR, you get:\r\n\r\n```\r\nE          Multiple packages failed to install:\r\n             zlib due to SpackError: ProcessError: blab la returned error code 2\r\n             'make' '-j16' 'non-exising-target'\r\n             libbsd due to SpackError: ProcessError: something something\r\n             'make' '-j16' 'non-exising-target'\r\n```\r\n\r\nThe idea is to only show the short error message, not the one that includes the parsed build log.\r\n",
    "user": "haampie",
    "url": "https://api.github.com/repos/spack/spack/issues/26651",
    "updated_at": "2021-10-19 00:45:26",
    "created_at": "2021-10-11 10:24:25",
    "closed_at": "None",
    "state": "open",
    "title": "Summarize errors in final InstallError",
    "number": 26651,
    "milestone": null,
    "labels": [],
    "id": 1022529082,
    "html_url": "https://github.com/spack/spack/pull/26651",
    "assignees": [],
    "comments": 0
}