{
    "body": "I would like to overhaul Spack's CI infrastructure. Here is what I have in mind.\n## Only test what has changed\n\nAs it is now, if I submit a PR that fixes a typo in the documentation, Travis runs `spack test`. Obviously, a documentation change can't possibly break Spack, so this test is unnecessary. If I submit a PR that adds a new package, we also run `spack test`. This test won't catch anything more than whether or not the file can be parsed by Spack. We can do better.\n\nI propose that we divide our tests into 4 test suites: packages, core, docs, and flake8. If you have any more testing groups you would like to see, let me know.\n### Package tests\n\nIf the only files that have changed are in `var/spack/repos/builtin/packages`, running `spack test` doesn't do us any good. We need package-specific testing. What I'm thinking is for every package.py file that is modified, or at least the leaf nodes, run a set of Spack commands:\n- spack info\n  - prevents problems like #1503\n- spack versions\n  - doesn't work for most packages, but we should fix that\n- spack checksum\n  - same problem as above\n- spack fetch\n  - try fetching every single version to make sure they are still available\n  - checks that url_for_version works for every version\n- spack patch\n  - try patching every available version\n  - checks that added patches actually work for all versions specified\n  - checks that new versions added to a package still work with the patch\n- spack graph --concretize\n  - currently breaks for any package of considerable size, see #1098 \n- spack spec\n  - run for every possible set of variants\n  - catches problems like #1552 \n- spack env\n- spack install --run-tests\n- spack activate\n  - only run for extensions\n  - checks whether or not files conflict\n\nNote that many of these tests will need to be skipped for packages that cannot be fetched from a URL. Also keep in mind that many of these tests would fail if we ran them on current packages. Sometimes this is fine, but sometimes it could be easy to fix. By actually testing installations through Travis, we can see if there are any missing dependencies that aren't found on a bare-bones Linux system.\n### Core tests\n\nOnly run `spack test` if core Spack libraries have been modified. This is defined as files within:\n- bin\n- etc\n- lib\n  - but exclude lib/spack/docs, see below\n- share\n  - does `spack test` currently cover this stuff?\n  - may want to add a new test suite specifically for this\n    - could source `setup-env.sh` and `setup-env.csh`\n\nObviously `spack test` isn't perfect, and there are many unit tests that could be added. This PR **will not** cover these. It will only cover when `spack test` is run.\n### Documentation tests\n\nIf you try building Spack's documentation, you'll notice that there are several warning and error messages. These messages should cause the test to fail. This prevents problems like #1140 (oops, my fault). We want developers to add documentation as frequently as possible, even if they don't know how to test their changes or aren't very familiar with reStructuredText.\n\nI'm not very familiar with all of the `make` options we use, but is there any target I should try building aside from the default?\n\nAs a part of this PR, I will attempt to resolve all current warning and error messages, so as not to repeat past mistakes with flake8 integration.\n\nThere isn't any way to automatically deploy new documentation to http://software.llnl.gov/spack/index.html when a documentation changing PR is accepted, is there??? This would fix an old issue, #892.\n\n~~Also, is there a way to make all Sphinx build warnings fatal? I wouldn't make it fatal permanently, just during testing.~~ You can use `make SPHINXOPTS=-W` to treat all warnings as fatal errors.\n### Flake8 tests\n\nI think these tests are pretty solid at this point. I may integrate #1510 into this PR.\n## macOS testing\n\nShould we start testing on osx? There is only one major hurdle that I see. [Travis does not currently support Python on osx](https://docs.travis-ci.com/user/languages/python/). I think it might be a virtual environment problem? Not sure. Anyway, there are [workarounds](https://docs.travis-ci.com/user/multi-os/#Python-example-%28unsupported-languages%29) that could allow us to run on osx anyway. We can also [allow failures](https://docs.travis-ci.com/user/multi-os/#Allowing-Failures-on-Jobs-Running-on-One-Operating-System) for osx.\n## Progress\n- [x] Write generic script for determining what files were modified\n- [x] Write generic script for determining if all dependencies are present\n- [x] Only run unit tests when core Spack framework is modified\n- [x] Add documentation testing\n- [x] Resolve current documentation warnings and errors\n- [ ] Add package-specific testing\n- [ ] Automatically update Spack's official documentation after a doc PR is merged\n- [ ] Update documentation in Developer Guide to reflect new CI tests\n\n@tgamblin @alalazo @citibeth @becker33 @eschnett @davydden \n",
    "user": "adamjstewart",
    "url": "https://api.github.com/repos/spack/spack/issues/1576",
    "updated_at": "2021-07-03 22:56:18",
    "created_at": "2016-08-22 16:32:45",
    "closed_at": "2016-08-31 03:43:45",
    "state": "closed",
    "title": "[WIP] Overhaul Spack's CI Infrastructure",
    "number": 1576,
    "milestone": null,
    "labels": [
        "documentation",
        "ci"
    ],
    "id": 172497350,
    "html_url": "https://github.com/spack/spack/pull/1576",
    "assignees": [],
    "comments": 55
}