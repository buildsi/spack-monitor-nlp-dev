{
    "body": "This should merged after #28468, as it builds on top of it.\r\n\r\nThe reusing concretizer minimizes builds, but it still preserves defaults from packages and preferences while doing that. We can be more aggressive by making minimization the top priority, at the expense of \"weird\" concretizations.\r\n\r\nThis can be advantageous: if you write your packages as explicitly as possible, then you can use that with `--minimal` to get the smallest possible package configuration (at least in terms of the number of packages in the build).  Conversely, you can use minimal concretization as kind of a worst case to ensure that you have the \"right\" constraints on your dependencies.\r\n\r\nExample for intuition: `cmake` can optionally build without openssl, but it's enabled by default because many builds use that functionality. Using `minimal: true` will build `cmake~openssl` unless the user asks for `cmake+openssl` explicitly.\r\n\r\n### Examples\r\n\r\nSay there's one `cmake` installed, with hash `zd4m26e `:\r\n\r\n```console\r\n(spackle):spack> spack find -l cmake\r\n==> 1 installed package\r\n-- darwin-bigsur-skylake / apple-clang@12.0.5 -------------------\r\nzd4m26e cmake@3.21.1\r\n```\r\n\r\nBy default, we would build a fancy new one:\r\n\r\n```console\r\n$ spack spec -l cmake\r\n[...]\r\nmo7v6mw  cmake@3.22.1%apple-clang@13.0.0~doc+ncurses+openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\nxdbaqeo      ^ncurses@6.2%apple-clang@13.0.0~symlinks+termlib abi=none arch=darwin-bigsur-skylake\r\nkfureok          ^pkgconf@1.8.0%apple-clang@13.0.0 arch=darwin-bigsur-skylake\r\nqxn6sl3      ^openssl@1.1.1m%apple-clang@13.0.0~docs certs=system arch=darwin-bigsur-skylake\r\nxz6a265          ^perl@5.34.0%apple-clang@13.0.0+cpanm+shared+threads arch=darwin-bigsur-skylake\r\nxgt3tls              ^berkeley-db@18.1.40%apple-clang@13.0.0+cxx~docs+stl patches=b231fcc4d5cff05e5c3a4814f6a5af0e9a966428dc2176540d2c05aff41de522 arch=darwin-bigsur-skylake\r\n65edjf6              ^bzip2@1.0.8%apple-clang@13.0.0~debug~pic+shared arch=darwin-bigsur-skylake\r\n662adoo                  ^diffutils@3.8%apple-clang@13.0.0 arch=darwin-bigsur-skylake\r\nfu7tfsr                      ^libiconv@1.16%apple-clang@13.0.0 libs=shared,static arch=darwin-bigsur-skylake\r\nvjg67nd              ^gdbm@1.19%apple-clang@13.0.0 arch=darwin-bigsur-skylake\r\ntjceldr                  ^readline@8.1%apple-clang@13.0.0 arch=darwin-bigsur-skylake\r\nxevvljj              ^zlib@1.2.11%apple-clang@13.0.0+optimize+pic+shared arch=darwin-bigsur-skylake\r\n```\r\n\r\nWith `--reuse`, we'd use the installed `zd4m26e`:\r\n\r\n```console\r\n$ spack spec -l --reuse cmake\r\n[...]\r\nzd4m26e  cmake@3.21.1%apple-clang@12.0.5~doc+ncurses+openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n53i52xr      ^ncurses@6.2%apple-clang@12.0.5~symlinks+termlib abi=none arch=darwin-bigsur-skylake\r\nus36bwr      ^openssl@1.1.1l%apple-clang@12.0.5~docs+systemcerts arch=darwin-bigsur-skylake\r\n74mwnxg          ^zlib@1.2.11%apple-clang@12.0.5+optimize+pic+shared arch=darwin-bigsur-skylake\r\n```\r\n\r\n`--minimal` alone would build a new `cmake` with options that require a dependency turned off (here, `~ncurses` and `~openssl`):\r\n\r\n```console\r\n$ spack spec -l --minimal cmake\r\n[...]\r\ng6szokb  cmake@3.22.1%apple-clang@13.0.0~doc~ncurses~openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n```\r\n\r\nUsing both picks `zd4m26e` again because that gets you zero builds:\r\n\r\n```console\r\n$ spack spec -l --minimal --reuse cmake\r\n[...]\r\nzd4m26e  cmake@3.21.1%apple-clang@12.0.5~doc+ncurses+openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n53i52xr      ^ncurses@6.2%apple-clang@12.0.5~symlinks+termlib abi=none arch=darwin-bigsur-skylake\r\nus36bwr      ^openssl@1.1.1l%apple-clang@12.0.5~docs+systemcerts arch=darwin-bigsur-skylake\r\n74mwnxg          ^zlib@1.2.11%apple-clang@12.0.5+optimize+pic+shared arch=darwin-bigsur-skylake\r\n```\r\n\r\nUsing both with `cmake ~openssl` will reuse `ncurses/53i52xr` (because it doesn't add a build):\r\n\r\n```console\r\n(spackle):spack> spack spec -l --minimal --reuse cmake~openssl\r\n[...]\r\nrcvz2la  cmake@3.22.1%apple-clang@13.0.0~doc+ncurses~openssl+ownlibs~qt build_type=Release arch=darwin-bigsur-skylake\r\n53i52xr      ^ncurses@6.2%apple-clang@12.0.5~symlinks+termlib abi=none arch=darwin-bigsur-skylake\r\n```\r\n\r\nI am not sure if people want this result or the one from `spack spec -l --minimal cmake` above.  `--minimize` is minimizing builds, not nodes.  I could see where both could be useful, but you can effectively get minimization of nodes right now by *just* using `--minimal` (see above), so I don't think we need to add another config.  This is more composable.\r\n\r\n- [x] add `minimal` option to `concretizer.yaml`\r\n- [x] add `--minimal` CLI option to concretizer arguments\r\n- [x] wire everything up\r\n- [x] add some tests",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/28470",
    "updated_at": "2022-01-18 22:05:28",
    "created_at": "2022-01-17 23:45:03",
    "closed_at": "None",
    "state": "open",
    "title": "concretizer: add `--minimal` configuration/CLI option",
    "number": 28470,
    "milestone": null,
    "labels": [
        "configuration",
        "concretization",
        "defaults",
        "tests",
        "commands",
        "environments"
    ],
    "id": 1106344723,
    "html_url": "https://github.com/spack/spack/pull/28470",
    "assignees": [],
    "comments": 0
}