{
    "body": "I think spack's handling of default (unspecified) CFLAGS and CXXFLAGS\r\nis surprising and incorrect.\r\n\r\nLet's use xz utils (lzma compression) as a simple example.  xz is\r\nstraightforward autotools and has a tiny package.py script, using all\r\ndefault AutotoolsPackage build machinery.\r\n\r\nFirst, let's build xz manually (outside of spack), specifying only\r\n--prefix and not CFLAGS.\r\n\r\n$ ../xz-5.2.3/configure  --prefix=/home/krentel/work/install/\r\n$ make\r\n\r\nThe generated Makefile has:\r\n\r\nCFLAGS = -g -O2\r\n\r\nAnd a typical compile line is (note the inclusion of -g -O2).\r\n\r\nlibtool: compile: gcc -std=gnu99 -DHAVE_CONFIG_H\r\n-I. -I../../../xz-5.2.3/src/liblzma\r\n-I../.. -I../../../xz-5.2.3/src/liblzma/api\r\n-I../../../xz-5.2.3/src/liblzma/common\r\n-I../../../xz-5.2.3/src/liblzma/check\r\n-I../../../xz-5.2.3/src/liblzma/lz\r\n-I../../../xz-5.2.3/src/liblzma/rangecoder\r\n-I../../../xz-5.2.3/src/liblzma/lzma\r\n-I../../../xz-5.2.3/src/liblzma/delta\r\n-I../../../xz-5.2.3/src/liblzma/simple -I../../../xz-5.2.3/src/common\r\n-DTUKLIB_SYMBOL_PREFIX=lzma_ -pthread -fvisibility=hidden -Wall\r\n-Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs\r\n-Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith\r\n-Wbad-function-cast -Wwrite-strings -Wlogical-op -Waggregate-return\r\n-Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes\r\n-Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT\r\nliblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c\r\n../../../xz-5.2.3/src/liblzma/common/common.c -fPIC -DPIC -o\r\n.libs/liblzma_la-common.o\r\n\r\nSo, I didn't specify CFLAGS and xz's configure script selected\r\nCFLAGS='-g -O2' as its default.\r\n\r\nBut now, if we try spack install without specifying cflags, we get a\r\nvery different result.\r\n\r\n$ spack  install  -v  --keep-stage  xz\r\n\r\nUsing --keep-stage, we go into the build directory and look at the\r\ngenerated Makefile.\r\n\r\nCFLAGS = \r\n\r\nAnd indeed, a compile line makes no mention of -g or -O2.\r\n\r\nlibtool: compile: /home/krentel/work/spack-repo/lib/spack/env/gcc/gcc\r\n-std=gnu99 -DHAVE_CONFIG_H\r\n-I. -I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma\r\n-I../.. -I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/api\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/common\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/check\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/lz\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/rangecoder\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/lzma\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/delta\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/liblzma/simple\r\n-I/home/krentel/work/spack-repo/var/spack/stage/xz-5.2.3-zaiqz5siodty64rxu4mqz4ayjogfbabw/xz-5.2.3/src/common\r\n-DTUKLIB_SYMBOL_PREFIX=lzma_ -pthread -fvisibility=hidden -Wall\r\n-Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs\r\n-Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith\r\n-Wbad-function-cast -Wwrite-strings -Wlogical-op -Waggregate-return\r\n-Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes\r\n-Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -MT\r\nliblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c\r\ncommon/common.c -fPIC -DPIC -o .libs/liblzma_la-common.o\r\n\r\nThat is, the spack default is -O0 and no debugging symbols.\r\n\r\nThe problem is that spack is inserting an explicit CFLAGS='' (empty)\r\ninto the configure script.  Again, you can see this with --keep-stage\r\nin config.log.  (Currently this is via the environment, not the\r\ncommand line, but either way works the same.)\r\n\r\nI think this is very surprising and actually incorrect.  Instead,\r\nspack should recoginize that cflags is unspecified and pass along\r\n'unspecified' by leaving off CFLAGS from the command line or the\r\nenvironment.\r\n\r\nIf I put cflags='...' in the spec, then of course, spack should pass\r\nthat on to each package.  But if I omit cflags, then spack should omit\r\nCFLAGS so that each package chooses its natural default.\r\n\r\nI'm curious how spack users handle this.\r\n\r\nIs everyone careful to always add cflags='-g -O2' to the spec?\r\n\r\nAre people getting lots of unoptimized builds without debug symbols\r\nand not knowing it?\r\n\r\nThanks,\r\n\r\n--Mark\r\n",
    "user": "mwkrentel",
    "url": "https://api.github.com/repos/spack/spack/issues/6096",
    "updated_at": "2018-07-24 04:48:13",
    "created_at": "2017-11-02 04:51:46",
    "closed_at": "2018-07-22 22:21:23",
    "state": "closed",
    "title": "surprising treatment of unspecified cflags",
    "number": 6096,
    "milestone": null,
    "labels": [],
    "id": 270531603,
    "html_url": "https://github.com/spack/spack/issues/6096",
    "assignees": [],
    "comments": 10
}