{
    "body": "Hi,\r\n\r\nI am aware of the `spack-tools` workflow to build compilers and other tools (e.g. CMake) in a second instance of spack.\r\n\r\nCompilers are (in my na\u00efve world-view) bootstrapped.\r\nI found that compiling them externally first blows up the \"getting started\" workflow quite a bit for users (not me personally, but *users*).\r\n\r\nBut especially for CUDA C++ programs, there are [quite some limitations](https://gist.github.com/ax3l/9489132) on which compilers we are able to use...\r\n\r\nIs there a fundamental reason we can't mark packages \"bootstrapped\", such as compilers so we can use and trigger their build when requested in a spec? This would make spack so much more powerful to the average user!\r\n\r\n```bash\r\nspack install boost %gcc@5.3.0\r\n# oh you don't have a GCC 5.3.0!\r\n# I will just bootstrap one for you\r\n# ... here we go\r\n# ... and now I even add it to your compilers.yaml and packages.yaml lists\r\n#      (\uff89\uff9f\u25bd\uff9f)\uff89\r\n```\r\n\r\nIs this a planned feature (or did I overlook an issue for it)?\r\n\r\n```bash\r\nspack install gcc@5.3.0\r\n# Can this package be bootstrapped? Yes, so I will forget its dependencies for you\r\n# ... here we go\r\n# huh, this is a compiler!\r\n# ... now I even add it to your compilers.yaml and packages.yaml lists\r\n#      (\uff89\uff9f\u25bd\uff9f)\uff89\r\n```",
    "user": "ax3l",
    "url": "https://api.github.com/repos/spack/spack/issues/5101",
    "updated_at": "2019-12-10 17:55:38",
    "created_at": "2017-08-15 09:10:57",
    "closed_at": "2019-12-10 10:24:17",
    "state": "closed",
    "title": "Use compilers for the same Spack",
    "number": 5101,
    "milestone": null,
    "labels": [
        "question"
    ],
    "id": 250261925,
    "html_url": "https://github.com/spack/spack/issues/5101",
    "assignees": [
        "alalazo"
    ],
    "comments": 16
}