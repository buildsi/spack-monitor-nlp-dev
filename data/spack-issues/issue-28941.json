{
    "body": "**Use case description copied from #27964**\r\n\r\nCurrently, environments can either be concretized fully together or fully separately. This works well for users who create environments for interoperable software and can use concretization: together. It does not allow environments with conflicting software to be concretized for maximal interoperability.\r\n\r\nThe primary use-case for this is facilities providing system software. Facilities provide multiple MPI implementations, but all software built against a given MPI ought to be interoperable.\r\n\r\nThis PR adds a concretization option together_where_possible. When this option is used, Spack will concretize specs in the environment separately, but will optimize for minimal differences in overlapping packages.\r\n\r\n**Implementation differences**\r\n\r\nThe algorithm used here is greedy, since specs are computed in multiple rounds where clingo concretizes together as many input specs as possible. The gist of the algorithm is:\r\n\r\nhttps://github.com/alalazo/spack/blob/f6420eaf6eb5e10a3e4d0b0a1a6c20e4404f92c1/lib/spack/spack/solver/asp.py#L2092-L2135\r\n\r\nTo relax the requirements on input specs and allow for not solving some of them we add a new indirection:\r\n\r\nhttps://github.com/alalazo/spack/blob/f6420eaf6eb5e10a3e4d0b0a1a6c20e4404f92c1/lib/spack/spack/solver/asp.py#L1787-L1802\r\n\r\nand we give clingo the choice to solve for the input literal or not. All the input specs computed in previous rounds are then reused in later rounds to ensure the environment is as contained as possible.\r\n\r\n**Comparison with #27964**\r\nWhen trying out the encoding in #27964 for production environments we saw that there were huge requests:\r\n- On memory during grounding, see https://github.com/spack/spack/pull/27964#issuecomment-1032474892\r\n- On time, during solve, see https://github.com/spack/spack/pull/27964#discussion_r805136646\r\n\r\nThe solve-time can very likely be improved a lot by removing the symmetry of the new encoding with some artificial rules. The memory requests during the grounding phase instead will necessarily grow linearly with the number of PSIDs needed to solve the environment. That number is not known a-priori. It is capped by the number of specs in an environment (which is computationally unfeasible) but practically is usually much less. For instance, `e4s` has 119 specs and needs 3 process spaces to concretize.\r\n\r\nThis PR instead takes a greedy approach and perform N solves each with a single process space. It might give a different (and \"suboptimal\" i.e. with a number of subprocesses greater than strictly needed) result if compared with the encoding in #27964 but it is complete, i.e. if there is at least a solution the algorithm will not give a false negative. On the bright side, due to its greedy nature, it's much faster when solving for environments (`e4s` is solved in 3 rounds in ~1 min.).",
    "user": "alalazo",
    "url": "https://api.github.com/repos/spack/spack/issues/28941",
    "updated_at": "2022-03-14 16:21:34",
    "created_at": "2022-02-15 10:35:38",
    "closed_at": "None",
    "state": "open",
    "title": "Best effort co-concretization (iterative algorithm)",
    "number": 28941,
    "milestone": null,
    "labels": [
        "documentation",
        "tests",
        "commands",
        "environments",
        "gitlab"
    ],
    "id": 1138496574,
    "html_url": "https://github.com/spack/spack/pull/28941",
    "assignees": [],
    "comments": 5
}