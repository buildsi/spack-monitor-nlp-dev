{
    "body": "Closes #9221. (or should we just merge that first?) \r\nFixes #16084. @DiegoMagdaleno \r\n\r\n`DYLD_LIBRARY_PATH` can frequently break builtin macOS software when pointed at Spack libraries.  This is because it takes *higher* precedence than the default library search paths, which are used by system software.\r\n\r\n`DYLD_FALLBACK_LIBRARY_PATH`, on the other hand, takes lower precedence. At first glance, this might seem bad, because the software installed by Spack in an environment needs to find *its* libraries, and it should not use the defaults.  However, Spack's isntallations are always `RPATH`'d, so they do not have this problem.\r\n\r\n`DYLD_FALLBACK_LIBRARY_PATH` is thus useful for things built in an environment that need to use Spack's libraries, that don't set *their* RPATHs correctly for whatever reason. We now prefer it to `DYLD_LIBRARY_PATH` in modules and in environments because it helps a little bit, and it is much less intrusive.\r\n\r\nI think we should probably also do this for `LD_LIBRARY_PATH` on Linux, as it can interfere in siilar ways.  People *do* want to build against their environments, though, and it's much more common to use `LD_LIBRARY_PATH` there, so I'm torn.  Thoughts?\r\n\r\n@goxberry @adamjstewart @sethrj @gartung",
    "user": "tgamblin",
    "url": "https://api.github.com/repos/spack/spack/issues/16094",
    "updated_at": "2020-04-17 00:26:49",
    "created_at": "2020-04-16 17:54:25",
    "closed_at": "2020-04-17 00:23:35",
    "state": "closed",
    "title": "macos: use DYLD_FALLBACK_LIBRARY_PATH",
    "number": 16094,
    "milestone": null,
    "labels": [
        "macOS",
        "modules",
        "build-environment",
        "environments"
    ],
    "id": 601285931,
    "html_url": "https://github.com/spack/spack/pull/16094",
    "assignees": [],
    "comments": 5
}