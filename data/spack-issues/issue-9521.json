{
    "body": "Like `sudo`, for example\r\n\r\nFixes https://github.com/spack/spack/issues/4432\r\n\r\nPackage now has a 'child_input' context manager that can be used in Package.install to run commands that require user input\r\n\r\n```\r\nclass Foo(Package):\r\n    def install(self, spec, prefix):\r\n        sudo = Executable('sudo')\r\n        with self.child_input():\r\n            sudo('touch', os.path.join(prefix, 'file.txt'))\r\n```\r\n\r\nI'm having trouble writing a clear, concise unit test for this functionality: the best I can achieve right now is using `time.sleep()` to make the race condition \"really likely\". Forcing the race condition to come about is making the original code more complex.",
    "user": "scheibelp",
    "url": "https://api.github.com/repos/spack/spack/issues/9521",
    "updated_at": "2020-08-23 03:30:48",
    "created_at": "2018-10-12 21:27:06",
    "closed_at": "None",
    "state": "open",
    "title": "[WIP] Package.install: enable running commands that take user input",
    "number": 9521,
    "milestone": null,
    "labels": [
        "feature"
    ],
    "id": 369716175,
    "html_url": "https://github.com/spack/spack/pull/9521",
    "assignees": [],
    "comments": 0
}